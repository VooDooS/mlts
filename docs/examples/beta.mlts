type utm =
     | App of utm * utm
     | Abt of utm => utm
     ;;
     
let rec aux_beta var body term =
  match (var::body::[]) with
  | nab X in (X::App(m X, n X)::[] ->
              App(aux_beta (X) (m X) term, aux_beta (X) (n X) term))
  | nab X in (X::(Abt(r X))::[] ->
              Abt(y\ (aux_beta (X) (r X y) term)))
  | nab X in (X::X::[] -> term)
  | nab X Y in (X::Y::[] -> Y)

;;
         
 
let rec beta absterm term =
  match absterm with
  | Abt(r) -> new X in aux_beta (X) (r X) term
;;

beta (Abt(x\x)) (Abt(x\x));;
beta (Abt(x\ (App(x, x)))) (Abt(x\x));;
beta (Abt(x\ Abt(y\ (App(x, x))))) (Abt(x\x));;
beta (Abt(x\ Abt(y\ (App(x, y))))) (Abt(x\x));;
beta (Abt(x\ Abt(y\ x))) (Abt(x\x));;
beta (Abt(x\ Abt(y\ y))) (Abt(x\x));;
