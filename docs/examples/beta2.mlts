type utm =
  | App of utm * utm
  | Abs of utm => utm
;;

let rec subst t x u =
  match (x, t) with
  | nab X in (X, X) -> u
  | nab X Y in (X, Y) -> Y
  | (x, App(m, n)) -> App(subst m x u, subst n x u)
  | (x, Abs r) -> Abs(Y\ subst (r @ Y) x u)
;;

let rec beta t =
  match t with
  | App(m, n) ->
    let m = beta m in
    let n = beta n in
    begin 
        match m with
        | Abs r -> new X in beta (subst (r @ X) X n)
        | w -> App(m, n)
    end
  | Abs r -> Abs (Y \ beta (r @ Y))
  | nab X in X -> X
;;


new X in Abs(Y\ subst (App(X, X)) X (App(Y, Y)));;
beta (Abs(X\ X));;
beta (Abs(X\ Abs(Y\ App(X, Y))));;
beta (App(Abs(X\ X), Abs(Y\ App(Y, Y))));;
beta (App(Abs(X\ Abs(Y\ App(Y, X))), Abs(X\ X)));;
(* beta (App(Abs(X\ App(X, X)), Abs(Y\ App(Y, Y))));; *)
beta (App(App(Abs(X\Abs(Y\Abs(Z\App(App(X,Z),App(Y,Z))))),
              Abs(X\Abs(Y\X))),
          Abs(X\Abs(Y\X))));;
new X in beta (App(X));;
