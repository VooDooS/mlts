type utm =
  | App of utm * utm
  | Abs of utm => utm
;;

let rec subst t x u =
  match (x, t) with
  | nab X in (X, X) -> u
  | nab X Y in (X, Y) -> Y
  | (x, App(m, n)) -> App(subst m x u, subst n x u)
  | (x, Abs r) -> Abs(y \ subst (r @ y) x u)
;;

let rec beta t =
  match t with
  | App(m, n) ->
    let m = beta m in
    let n = beta n in
    begin 
        match m with
        | Abs r -> new X in beta (subst (r @ X) X n)
        | w -> App(m, n)
    end
  | Abs r -> Abs (y \ beta (r @ y))
  | nab X in X -> X
;;


new X in Abs(y\ subst (App(X, X)) X (App(y, y)));;
beta (Abs(x\ x));;
beta (Abs(x\ Abs(y\ App(x, y))));;
beta (App(Abs(x\ x), Abs(y\ App(y, y))));;
beta (App(Abs(x\ Abs(y\ App(y, x))), Abs(x\ x)));;
(* beta (App(Abs(x\ App(x, x)), Abs(y\ App(y, y))));; *)
beta (App(App(Abs(x\Abs(y\Abs(z\App(App(x,z),App(y,z))))),
              Abs(x\Abs(y\x))),
          Abs(x\Abs(y\x))));;
new X in beta (App(X));;
