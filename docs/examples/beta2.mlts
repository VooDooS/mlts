type tm =
  | App of tm * tm
  | Abs of tm => tm;;

let subst t u =
    new X in 
    let rec aux t = match t with
    | X -> u
    | nab Y in Y -> Y
    | App(u, v) -> App(aux u, aux v)
    | Abs r -> Abs(Y\ aux (r @ Y))
    in aux (t @ X);;


let rec beta t = match t with
  | Abs r      -> Abs(Y\ beta (r @ Y))
  | nab X in X -> X
  | App(m, n)  ->
    let m = beta m in let n = beta n in
    begin 
        match m with
        | Abs r -> beta (subst r n)
        | _ -> App(m, n)
    end ;;

beta (Abs(X\ X));;
beta (Abs(X\ Abs(Y\ App(X, Y))));;
beta (App(Abs(X\ X), Abs(Y\ App(Y, Y))));;
beta (App(Abs(X\ Abs(Y\ App(Y, X))), Abs(X\ X)));;
beta (App(App(Abs(X\Abs(Y\Abs(Z\App(App(X,Z),App(Y,Z))))),
              Abs(X\Abs(Y\X))),
          Abs(X\Abs(Y\X))));;
