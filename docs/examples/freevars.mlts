type utm =
     | App of utm * utm
     | Abt of utm => utm
;;

let rec mem x l = match l with
| [] -> false
| n::tl -> if n = x
  	   then true
  	   else mem x tl
;;
	   
let rec union l k =
    match l with
    | [] -> k
    | h::tl -> if mem h k
      	       then  union tl k
	       else h::(union tl k)
;;
     
let rec rm x l =
    match l with
    | [] -> []
    | h::tl -> if h = x
      	      then rm x tl
	      else h::(rm x tl)
;;
	      
let rec maptm fapp fabs fvar term =
	match term with
	| App(m, n) -> fapp (maptm fapp fabs fvar m) (maptm fapp fabs fvar n)
	| Abt(r)	-> fabs (fun x -> maptm fapp fabs fvar (r x))
	| nab X in X -> fvar X
;;

(*  let fv term  = maptm join (fun r -> na x\ rm x (r x)) (fun x -> [x]) term;; *)
let rec fv term = 
	maptm	(fun n -> fun m -> union n m) 
		(fun r -> new X in  rm X (r X))
		(fun x -> x::[])
		term
;;
	
fv (Abt(x\ App(x, x)));;
fv (Abt(x\ Abt(y\ App(y, App(x, y)))));;
fv (Abt(x\ App(App(x, x), App(x, x))));;
(Abt(x\ fv (App(App(x, x), App(x, x)))));;