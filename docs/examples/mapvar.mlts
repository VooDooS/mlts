type utm =
     | App of utm * utm
     | Abs of utm => utm
     ;;

let rec mapvar f t =
  match t with
  | App(m, n) -> App(mapvar (f) m, mapvar (f) n)
  | Abs(r) -> Abs(x\ mapvar (f) (r @ x))
  | nab X in X -> f X
;;

let rec lookup sub term =
  match term with
  | nab X in X ->
              let rec aux s =
                match s with
                | [] -> X
                | (X, t)::tl -> t
                | p::tl -> aux tl
             in aux sub
;;

let substtm sub term =
  mapvar (lookup sub) term;;

new X in Abs(y\ substtm ((X, y)::[]) (App(X, Abs(z\ z))));;
new X in new Y in substtm ((X, Abs(z\ z))::(Y, Abs(w\w))::[])
                           (App(X, Abs(z\ App(z, Y))));;