(* -*- mode: tuareg -*- *)

type tm =
  | Abs of tm => tm
  | App of tm * tm
;;

type tm2 =
  | Abs2 of tm2 => tm2
  | App2 of tm2 * tm2
;;

let rec assoc x l =
    match l with
    | ((y, a)::l) -> if x = y then a
        else assoc x l
;;

(* We need a context (g) to keep trace
   of the pairing of nominals *)
let rec trans g t =
    match t with
    | App(l, r) -> App2(trans g l, trans g r)
    | Abs(r) -> 
        new X in 
        Abs2(Y\ trans ((X,Y)::g) (r @ X))
    | nab X in X -> (assoc X g)
    ;;
    
trans [] (Abs(X\ X));;
trans [] (Abs(X\ App(X, X)));;
trans [] (Abs(X\ App(X, Abs(Y\Y))));;