type tm =
  | App of tm * tm
  | Abs of tm => tm
;;


let subst r u =
    new X in 
    let rec aux t = match t with
    | X -> u
    | nab Y in Y -> Y
    | App(u, v) -> App(aux u, aux v)
    | Abs r -> Abs(Y\ aux (r @ Y))
    in aux (r @ X)
;;

subst (X\ Abs(Y\ (App(Y, X)))) (Abs(Z\ Z));;