type utm =
| App of utm * utm
| Abt of utm -> utm
;;

let rec vacp t =
  match t with
  | Abt(r) -> new X in
    let rec aux term =
      match term with
      | X -> false
      | nab Y in (Y -> true)
      | App(m, n) -> (aux m) && (aux n)
      | Abt(r) -> new Y in (aux (r Y))
    in (aux (r X))
;;	
	    
vacp (Abt(x\ x));;
vacp (Abt(x\ App(x, x)));;
vacp (Abt(x\ Abt(y\ y)));;	