type utm =
| App of utm * utm
| Abs of utm => utm
;;

let vacp t =
  match t with
  | Abs(r) -> new X in
    let rec aux term =
      match term with
      | X -> false
      | nab Y in Y -> true
      | App(m, n) -> (aux m) && (aux n)
      | Abs(r) -> new Y in aux (r @ Y)
    in aux (r @ X)
;;	
	    
vacp (Abs(X\ X));;
vacp (Abs(X\ App(X, X)));;
vacp (Abs(X\ Abs(Y\ Y)));;	