type tm =
     | App of tm * tm
     | Abs of tm => tm ;;

let rec vacp1 t =  match t with
    | (X\X)                  -> false
    | nab Y in (X\Y)         -> true
    | (X\ App(m @ X, n @ X)) -> (vacp1 m) && (vacp1 n)
    | (X\ Abs(Y\ r @ X Y))   -> new Y in vacp1(X\ r @ X Y);;

let rec vacp2 t r =
    new X in
    let rec aux term = match term with
        | X          -> false
        | nab Y in Y -> true
        | App(m, n)  -> (aux m) && (aux n)
        | Abs(u)     -> new Y in aux (u @ Y)
    in aux (r @ X);;

let vacp3 t = match t with
    | X\s  -> true
    | _ -> false;;

vacp1 (X\X);;
vacp1 (X\ App(X, X));;
vacp1 (X\ Abs(Y\Y));;	
vacp1 (X\ App(Abs(Y\Y),Abs(Y\Y)));;

vacp2 (X\X);;
vacp2 (X\ App(X, X));;
vacp2 (X\ Abs(Y\Y));;	
vacp2 (X\ App(Abs(Y\Y),Abs(Y\Y)));;

vacp3 (X\X);;
vacp3 (X\ App(X, X));;
vacp3 (X\ Abs(Y\Y));;	
vacp3 (X \ App(Abs(Y\Y),Abs(Y\Y)));;
