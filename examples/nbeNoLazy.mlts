(* 
    Adapted from 

    https://www.cl.cam.ac.uk/~amp12/papers/frepbm/frepbm.pdf
*)

type tm =
  | Abs of tm => tm
  | App of tm * tm
;;

type sem =
  | New of tm => sem
  (* function (should be unit but not yet supported) *)
  | L of sem -> sem
  (* neutral *)
  | N of neu
;;

type neu =
  | V of tm
  (* neutral appn *)
  | A of neu * sem
;;

let rec reify s =
    match s with
    | New r -> new Z in reify (r @ Z)
    | L f   -> Abs(X\ reify (f (N (V X))))
    | N n   -> reifyn n
and reifyn n =
    match n with
    | nab Y in V Y -> Y
    | A (n, s)     -> App (reifyn n, reify s)
  ;;

let rec evals env term =
    match term with
    | nab X in X  -> 
        begin match env with
        | []                    -> N (V X)
        | (X, v)::env           -> v
        | nab Y in (Y, v)::env  -> evals env X
        end
    | Abs t       ->
        L (fun v -> New (Z\ evals ((Z,v)::env) (t @ Z)) )
    | App(t1, t2) ->
        let rec apply s = match s with
            | New r -> New (Z\ apply (r @ Z))
            | L f   -> f (evals env t2) 
            | N n   -> N (A (n, evals env t2)) 
        in
        apply (evals env t1)
;;

let eval t = evals [] t;;
let norm t = reify (eval t);;

norm (App(Abs(X\ Abs(Y\X)), Abs(X\ X)));;
norm (App(App(Abs(X\Abs(Y\Abs(Z\App(App(X,Z),App(Y,Z))))),
              Abs(X\Abs(Y\X))),
          Abs(X\Abs(Y\X))));;
