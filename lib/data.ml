type file = { name: string; text: string }
let files = [{ name = "lp-syntax.elpi"; text = "JSBlbHBpOiBlbWJlZGRlZCBsYW1iZGEgcHJvbG9nIGludGVycHJldGVyCiUgbGljZW5zZTogR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIFZlcnNpb24gMi4xIG9yIGxhdGVyCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBUaGlzIGZpbGUgcG9wdWxhdGVzIHRoZSBncmFtbWFyIG9mIEVMUEkgYW5kIGlzIGFsd2F5cyBsb2FkZWQgZmlyc3QKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgpwcmVmaXggfiAgMjU2LiAgICAgICBwcmVmaXggaX4gIDI1Ni4gICAgIHByZWZpeCByfiAgMjU2LgppbmZpeGwgbW9kIDE2MC4KaW5maXhsIGRpdiAxNjAuCmluZml4bCAqICAxNjAuICAgICAgIGluZml4bCBpKiAgMTYwLiAgICAgaW5maXhsIHIqICAxNjAuCmluZml4bCAvICAxNjAuCmluZml4bCBeICAxNTAuCmluZml4bCArICAxNTAuICAgICAgIGluZml4bCBpKyAgMTUwLiAgICAgaW5maXhsIHIrICAxNTAuCmluZml4bCAtICAxNTAuICAgICAgIGluZml4bCBpLSAgMTUwLiAgICAgaW5maXhsIHItICAxNTAuCmluZml4ciA6OiAxNDAuCmluZml4ICBAICAxMzUuCmluZml4ICA+ICAxMzAuICAgICAgIGluZml4ICBpPiAgMTMwLiAgICAgaW5maXggIHI+ICAxMzAuICAgICBpbmZpeCAgcz4gIDEzMC4KaW5maXggIDwgIDEzMC4gICAgICAgaW5maXggIGk8ICAxMzAuICAgICBpbmZpeCAgcjwgIDEzMC4gICAgIGluZml4ICBzPCAgMTMwLgppbmZpeCAgPj0gMTMwLiAgICAgICBpbmZpeCAgaT49IDEzMC4gICAgIGluZml4ICByPj0gMTMwLiAgICAgaW5maXggIHM+PSAxMzAuCmluZml4ICA9PCAxMzAuICAgICAgIGluZml4ICBpPTwgMTMwLiAgICAgaW5maXggIHI9PCAxMzAuICAgICBpbmZpeCAgcz08IDEzMC4KaW5maXggID0gIDEzMC4KaW5maXggIGlzIDEzMC4KaW5maXhyIGFzIDEyOS4KaW5maXhyID0+IDEyOS4KaW5maXhyICYgIDEyMC4KaW5maXggID8tIDExNS4KJSBpbmZpeHIgLCAgMTEwLiAgVGhpcyBpcyBub3cgYnVpbHQtaW4gdG8gcGFyc2UgaXQgYXMgbi1hcnkKaW5maXhyIDsgIDEwMC4KaW5maXhsIDotIDAuCmluZml4ciAtPiAxMTYuCgolIENvbnZlbmllbmNlIHN5bWJvbHMgZm9yIGFzc29jaWF0aXZlIGxpc3RzCmluZml4IGAtPiAxNDEuCmluZml4IGA6IDE0MS4=" }; { name = "pervasives.elpi"; text = "JSBlbHBpOiBlbWJlZGRlZCBsYW1iZGEgcHJvbG9nIGludGVycHJldGVyCiUgbGljZW5zZTogR05VIExlc3NlciBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIFZlcnNpb24gMi4xIG9yIGxhdGVyCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBMYW1iZGEgUHJvbG9nIHN0YW5kYXJkIHByZWRpY2F0ZXMKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgpwcmVkIHRydWUuCnRydWUuCgpwcmVkIGZhaWwuCnByZWQgZmFsc2UuCgpwcmVkICg9KSBvOkEsIG86QS4KWCA9IFguCgooQSA7IF8pIDotIEEuCihfIDsgQikgOi0gQi4KCmV4dGVybmFsIHByZWQgIS4KCnByZWQgbm90IGk6cHJvcC4Kbm90IFggOi0gWCwgISwgZmFpbC4Kbm90IF8uCgpleHRlcm5hbCBwcmVkIGhhbHQuCnN0b3AgOi0gaGFsdC4KCmtpbmQgY3R5cGUgdHlwZS4KdHlwZSBjdHlwZSBzdHJpbmcgLT4gY3R5cGUuCgptYWNybyBAZmlsZSA6LSBjdHlwZSAiZmlsZSIuCgpleHRlcm5hbCBwcmVkIG9wZW5faW4gICAgIGk6c3RyaW5nLCBvOkBmaWxlLgpleHRlcm5hbCBwcmVkIG9wZW5fb3V0ICAgIGk6c3RyaW5nLCBvOkBmaWxlLgpleHRlcm5hbCBwcmVkIGNsb3NlX2luICAgIGk6QGZpbGUuCmV4dGVybmFsIHByZWQgY2xvc2Vfb3V0ICAgaTpAZmlsZS4KZXh0ZXJuYWwgcHJlZCBvcGVuX2FwcGVuZCBpOnN0cmluZywgbzpAZmlsZS4KZXh0ZXJuYWwgcHJlZCBvcGVuX3N0cmluZyBpOnN0cmluZywgbzpAZmlsZS4KZXh0ZXJuYWwgcHJlZCBpbnB1dF9saW5lIGk6QGZpbGUsIG86c3RyaW5nLgpleHRlcm5hbCBwcmVkIG91dHB1dCAgICAgaTpAZmlsZSwgbzpzdHJpbmcuCmV4dGVybmFsIHByZWQgaW5wdXQgICAgICBpOmludCwgaTppbnQsIG86c3RyaW5nLgpleHRlcm5hbCBwcmVkIGZsdXNoIGk6QGZpbGUuCmV4dGVybmFsIHByZWQgZW9mIGk6QGZpbGUuCmV4dGVybmFsIHByZWQgbG9va2FoZWFkIGk6QGZpbGUsIG86c3RyaW5nLgoKZXh0ZXJuYWwgcHJlZCBnZXRlbnYgaTpzdHJpbmcsIG86c3RyaW5nLgpleHRlcm5hbCBwcmVkIHN5c3RlbSBpOnN0cmluZywgbzppbnQuCmV4dGVybmFsIHByZWQgZ2V0dGltZW9mZGF5IG86ZmxvYXQuCgpleHRlcm5hbCBwcmVkIHRlcm1fdG9fc3RyaW5nIGk6QSwgbzpzdHJpbmcuCmV4dGVybmFsIHByZWQgc3RyaW5nX3RvX3Rlcm0gaTpzdHJpbmcsIG86QS4KZXh0ZXJuYWwgcHJlZCByZWFkdGVybSBpOkBmaWxlLCBvOkEuCnByaW50dGVybSBTIFQgOi0gdGVybV90b19zdHJpbmcgVCBUMSwgb3V0cHV0IFMgVDEuCnJlYWQgUyA6LSBmbHVzaCBzdGRfb3V0LCBpbnB1dF9saW5lIHN0ZF9pbiBYLCBzdHJpbmdfdG9fdGVybSBYIFMuCgpleHRlcm5hbCBwcmVkIGx0XyBpOkEsIGk6QS4KZXh0ZXJuYWwgcHJlZCBndF8gaTpBLCBpOkEuCmV4dGVybmFsIHByZWQgbGVfIGk6QSwgaTpBLgpleHRlcm5hbCBwcmVkIGdlXyBpOkEsIGk6QS4KClggIDwgWSAgOi0gbHRfIFggWS4KWCBpPCBZICA6LSBsdF8gWCBZLgpYIHI8IFkgIDotIGx0XyBYIFkuClggczwgWSAgOi0gbHRfIFggWS4KClggID4gWSAgOi0gZ3RfIFggWS4KWCBpPiBZICA6LSBndF8gWCBZLgpYIHI+IFkgIDotIGd0XyBYIFkuClggcz4gWSAgOi0gZ3RfIFggWS4KClggID08IFkgOi0gbGVfIFggWS4KWCBpPTwgWSA6LSBsZV8gWCBZLgpYIHI9PCBZIDotIGxlXyBYIFkuClggcz08IFkgOi0gbGVfIFggWS4KClggID49IFkgOi0gZ2VfIFggWS4KWCBpPj0gWSA6LSBnZV8gWCBZLgpYIHI+PSBZIDotIGdlXyBYIFkuClggcz49IFkgOi0gZ2VfIFggWS4KCmV4dGVybmFsIHByZWQgaXNfIGk6QSwgaTpBLgpwcmVkIChpcykgbzpBLCBpOkEuClggaXMgWSA6LSBpc18gWCBZLgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgRWxwaSBwcmVkaWNhdGVzCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKZXh0ZXJuYWwgcHJlZCBkZWNsYXJlX2NvbnN0cmFpbnQgaTpBLCBpOkIuCmV4dGVybmFsIHByZWQgcHJpbnRfY29uc3RyYWludHMuCgpleHRlcm5hbCBwcmVkIHJleF9tYXRjaCBpOnN0cmluZywgaTpzdHJpbmcuCmV4dGVybmFsIHByZWQgcmV4X3JlcGxhY2UgaTpzdHJpbmcsIGk6c3RyaW5nLCBvOnN0cmluZy4KCmV4dGVybmFsIHR5cGUgcHJpbnQgdmFyaWFkaWMgYW55IHByb3AuCmV4dGVybmFsIHR5cGUgZHByaW50IHZhcmlhZGljIGFueSBwcm9wLgoKJSB0cmFjaW5nIGZhY2lsaXR5OiByZWFkIHRoZSB2YWx1ZSBvZiBhIHRyYWNpbmcgcG9pbnQgY291bnRlciBsaWtlICJydW4iCmV4dGVybmFsIHByZWQgY291bnRlciBpOnN0cmluZywgbzppbnQuCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSBFbHBpIE5PTiBMT0dJQ0FMIHByZWRpY2F0ZXMKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgpleHRlcm5hbCB0eXBlIGlzX2NkYXRhIEEgLT4gY3R5cGUgLT4gcHJvcC4gCnByaW1pdGl2ZT8gWCBTIDotIGlzX2NkYXRhIFggKGN0eXBlIFMpLgoKZXh0ZXJuYWwgcHJlZCB2YXIgaTpBLgpleHRlcm5hbCBwcmVkIHNhbWVfdmFyIGk6QSwgaTpBLgoKJSBzdWNjZWVkcyBpZmYgdGhlIHRlcm0gaXMgYSBwaS1ib3VuZCB2YXJpYWJsZQpleHRlcm5hbCBwcmVkIGlzX25hbWUgaTpBLgolIGdlbmVyYXRlcyBhIGxpc3Qgb2YgbmFtZXMsIHgwLi4uLnhuIHdoZXJlIG4gaXMgdGhlIGN1cnJlbnQgZGVwdGgKZXh0ZXJuYWwgcHJlZCBuYW1lcyBvOmxpc3QgQS4KJSBbb2NjdXJzIE5hbWUgVGVybV0gc3VjY2VlZHMgaWZmIHRoZSBOYW1lIG9jY3VycyBpbiBUZXJtCmV4dGVybmFsIHByZWQgb2NjdXJzIGk6QSwgaTpBLgoKJSBnZW5lcmF0ZXMgYSB2YXJpYWJsZSBhdCBsZXZlbCAwCmV4dGVybmFsIHByZWQgY2xvc2VkX3Rlcm0gbzpBLgoKJSBnZW5lcmF0ZXMgYSBmcmVzaCBpbnRlZ2VyLgpleHRlcm5hbCBwcmVkIG5ld19pbnQgbzppbnQuCgolIENhcnJpZXIgKGNsb3NlZCkgZGF0YSBhY3Jvc3MgYmFja3RyYWNraW5nIChlLmcuIHR5cGUgZXJyb3JzKQpleHRlcm5hbCBwcmVkIG5ld19zYWZlIG86Y3R5cGUgInNhZmUiLgpleHRlcm5hbCBwcmVkIG9wZW5fc2FmZSBpOmN0eXBlICJzYWZlIiwgbzpsaXN0IEEuCmV4dGVybmFsIHByZWQgc3Rhc2ggaTpjdHlwZSAic2FmZSIsIGk6QS4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIFR5cGUgYW5ub3RhdGlvbnMgZm9yIGNvbnN0YW50cwolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKCnR5cGUgKDo6KSBYIC0+IGxpc3QgWCAtPiBsaXN0IFguCnR5cGUgKFtdKSBsaXN0IFguCnR5cGUgKDotKSBwcm9wIC0+IHByb3AgLT4gcHJvcC4KdHlwZSAoOi0pIHByb3AgLT4gbGlzdCBwcm9wIC0+IHByb3AuCnR5cGUgKCwpIHZhcmlhZGljIHByb3AgcHJvcC4KdHlwZSAoPz8pIEEuCnR5cGUgKGFzKSBBIC0+IEEgLT4gQS4KdHlwZSAoLSkgQSAtPiBBIC0+IEEuCnR5cGUgKD0+KSBwcm9wIC0+IHByb3AgLT4gcHJvcC4KdHlwZSAoPT4pIGxpc3QgcHJvcCAtPiBwcm9wIC0+IHByb3AuCnR5cGUgKF4pIHN0cmluZyAtPiBzdHJpbmcgLT4gc3RyaW5nLgp0eXBlICgrKSBpbnQgLT4gaW50IC0+IGludC4KdHlwZSAoKikgaW50IC0+IGludCAtPiBpbnQuCnR5cGUgc3RkX2luIEBmaWxlLgp0eXBlIHN0ZF9vdXQgQGZpbGUuCnR5cGUgZGlzY2FyZCBBLgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolIEVscGkncyBzeW50YXgKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgolIFNlZSBlbHBpX3F1b3RlZF9zeW50YXguZWxwaQoKJSBxdW90ZV9zeW50YXggImZpbGVuYW1lLmVscGkiICJxdWVyeSBBIEIiIFByb2dyYW0gUXVlcnkKZXh0ZXJuYWwgcHJlZCBxdW90ZV9zeW50YXggaTpzdHJpbmcsIGk6c3RyaW5nLCBvOmxpc3QgQSwgbzpBLgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUgT1VUIE9GIFBMQUNFIChNYXRpdGEgc3BlY2lmaWMpCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKZXh0ZXJuYWwgcHJlZCBsdCBpOkEsIGk6QS4KZXh0ZXJuYWwgcHJlZCBsZXZlbCBpOkEsIG86aW50LgpleHRlcm5hbCB0eXBlIGRlcmVmIHZhcmlhZGljIGFueSBwcm9wLgoKJSB2aW06IHNldCBmdD1scHJvbG9nOgoKCg==" }; { name = "core/control.mod"; text = "bW9kdWxlIGNvbnRyb2wuCgppZiBQIFEgUiA6LSBQLCAhLCBRLgppZiBQIFEgUiA6LSBSLgo=" }; { name = "core/control.sig"; text = "c2lnIGNvbnRyb2wuCgp0eXBlIGlmICBwcm9wIC0+IHByb3AgLT4gcHJvcCAtPiBwcm9wLgo=" }; { name = "core/eval.mod"; text = "bW9kdWxlIGV2YWwuCgolIGV2YWwgQSBCICA6LSBhbm5vdW5jZSAoZXZhbCBBIEIpLgolIGFwcGx5bWF0Y2ggQSBCIEMgRCBFIDotIGFubm91bmNlIChhcHBseW1hdGNoIEEgQiBDIEQgRSkuCiUgY29weSAgIEEgQiAgIDotIGFubm91bmNlIChjb3B5IEEgQikuCgpmaXhidWcgVCA6LSB0ZXJtX3RvX3N0cmluZyBUIF8uCiAKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUlIENvcHkgY2xhdXNlcyBhbGxvd2luZyBvbmUgdG8gc3Vic3RpdHV0aW9uIGludG8gcHJvZ3JhbQolJSUlIGV4cHJlc3Npb25zLgoKY29weSAoWCBhcm9iYXNlIFkpICAgICAgKFUgYXJvYmFzZSBWKSAgICAgIDotIGNvcHkgWCBVLCBjb3B5IFkgVi4KY29weSAoY29uZCBYIFkgWikgKGNvbmQgVSBWIFcpIDotIGNvcHkgWCBVLCBjb3B5IFkgViwgY29weSBaIFcuCmNvcHkgKHNwZWMgWCBZIFopIChzcGVjIFggWSBXKSA6LSBtYXBwcmVkIGNvcHkgWiBXLgoKY29weSAobWF0Y2ggWCBZKSAobWF0Y2ggVSBWKSA6LSBjb3B5IFggVSwgbWFwcHJlZCBjb3B5cnVsZXh4eHggWSBWLgoKY29weSAobGFtIFIpICAgKGxhbSBTKSAgIDotIHBpIHhcIGNvcHkgeCB4ID0+IGNvcHkgKFIgeCkgKFMgeCkuCmNvcHkgKGZpeHB0IFIpIChmaXhwdCBTKSA6LSBwaSB4XCBjb3B5IHggeCA9PiBjb3B5IChSIHgpIChTIHgpLgpjb3B5IChuZXcgUikgICAobmV3IFMpICAgOi0gcGkgeFwgY29weSB4IHggPT4gY29weSAoUiB4KSAoUyB4KS4KY29weSAobGV0IFggUikgKGxldCBVIFMpIDotIGNvcHkgWCBVLCBwaSB4XCBjb3B5IHggeCA9PiBjb3B5IChSIHgpIChTIHgpLgoKY29weXJ1bGV4eHh4IChYID09PiBZKSAoVSA9PT4gVikgOi0gY29weSBYIFUsIGNvcHkgWSBWLgoKY29weXJ1bGV4eHh4IChuYWIgUikgKG5hYiBTKSA6LSBwaSB4XCBjb3B5IHggeCA9PiBjb3B5cnVsZXh4eHggKFIgeCkgKFMgeCkuCmNvcHlydWxleHh4eCAoYWxsIFIpIChhbGwgUykgOi0gcGkgeFwgY29weSB4IHggPT4gY29weXJ1bGV4eHh4IChSIHgpIChTIHgpLgoKY29weXJ1bGV4eHh4IChhbGwnICBSKSAoYWxsJyAgUykgOi0gcGkgeFwgKHBpIFhcIHBpIFVcIGNvcHkgKHggWCkgKHggVSkgOi0gY29weSBYIFUpID0+IGNvcHlydWxleHh4eCAoUiB4KSAoUyB4KS4KY29weXJ1bGV4eHh4IChhbGwnJyBSKSAoYWxsJycgUykgOi0gcGkgeFwgKHBpIFhcIHBpIFlcIHBpIFVcIHBpIFZcIGNvcHkgKHggWCBZKSAoeCBVIFYpIDotIGNvcHkgWCBVLCBjb3B5IFkgVikgPT4gY29weXJ1bGV4eHh4IChSIHgpIChTIHgpLgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQpwaW4gRyA6LSBwaSB4XCBub20geCA9PiAoRyB4KS4gJSBVc2UgdGhpcyB0byBpbnRyb2R1Y2UgYSBub21pbmFsCgp2YWwgKGxhbSBfKS4gICAgICAgICAgICAgICAgJSBGdW5jdGlvbnMgKGZvciBITyBwcm9ncmFtbWluZykKdmFsIE4gIDotIG5vbSBOLiAgICAgICAgICAgICUgTm9taW5hbHMgYXJlIHZhbHVlcwoKJSBCaWctc3RlcCBzZW1hbnRpYyBzcGVjaWZpY2F0aW9uCmV2YWwgViAgICAgICAgICAgIFYgOi0gdmFsIFYuCmV2YWwgKE0gYXJvYmFzZSBOKSAgICAgIFYgOi0gZXZhbCBNIEYsIGV2YWwgTiBVLCBhcHBseSBGIFUgVi4KZXZhbCAoZml4cHQgUikgICAgViA6LSBldmFsIChSIChmaXhwdCBSKSkgVi4KZXZhbCAobGV0IE0gUikgICAgViA6LSBldmFsIE0gVSwgZXZhbCAoUiBVKSBWLgpldmFsIChjb25kIEMgTCBSKSBWIDotIGV2YWwgQyBCLCBpZiAoQiA9IHR0KSAoZXZhbCBMIFYpIChldmFsIFIgVikuCmV2YWwgKG5ldyBFKSAgICAgIFYgOi0gZml4YnVnIEUsIHBpbiB4XCBldmFsIChFIHgpIFYuCgphcHBseSAobGFtIFIpIFUgICBWIDotIGV2YWwgKFIgVSkgVi4KCiUgVHJlYXRtZW50IGZvciBidWlsdC1pbiBzcGVjaWFsIGZ1bmN0aW9ucy4KdmFsICAgIChzcGVjIF8gXyBfKS4KZXZhbCBGIChzcGVjIEkgRiBbXSkgICAgICAgIDotIHNwZWNpYWwgSSBGLgphcHBseSAgKHNwZWMgMSBGdW4gQXJncykgVSBWIDotIGV2YWxfc3BlYyBGdW4gKFU6OkFyZ3MpIFYuCmFwcGx5ICAoc3BlYyBDIEZ1biBBcmdzKSBVIChzcGVjIEQgRnVuIChVOjpBcmdzKSkgOi0gQyA+IDEsIEQgaXMgQyAtIDEuCgolIEV2ZXJ5IHNwZWNpYWwgaGFzIGFyaXR5IDAgYW5kIGNvcGllcyB0byBpdHNlbGYuCmNvcHkgRiBGIDotIHNwZWNpYWwgXyBGLgoKJSBBbGxvdyBiYWNrdHJhY2tpbmcgZHVyaW5nIG1hdGNoaW5nPyBUaGUgZm9sbG93aW5nIHBsYWNlbWVudCBvZgolIFByb2xvZydzIGN1dCBkb2VzIG5vdCBhbGxvdyBiYWNrdHJhY2tpbmcgcGFzdCBhIHN1Y2Nlc3NmdWwgbWF0Y2guCgpldmFsIChtYXRjaCAgRXhwIFJ1bGVzKSBWIDotIGV2YWwgRXhwIFUsIG1hdGNoaW5nICBVIFJ1bGVzIE91dCwgISwgZXZhbCBPdXQgVi4KCm1hdGNoaW5nIFZhbCAoUjo6UnMpIFYgOi0gYXBwbHltYXRjaCBbXSBbXSBWYWwgUiBWICAgIDsgbWF0Y2hpbmcgVmFsIFJzIFYuCgphcHBseW1hdGNoIE5zIFZzIEV4cCAoYWxsICAgUikgViA6LSBzaWdtYSBYXCBhcHBseW1hdGNoIE5zIChhcml0eTAgWDo6VnMpIEV4cCAoUiBYKSBWLgphcHBseW1hdGNoIE5zIFZzIEV4cCAoYWxsJyAgUikgViA6LSBzaWdtYSBYXCBhcHBseW1hdGNoIE5zIChhcml0eTEgWDo6VnMpIEV4cCAoUiBYKSBWLgphcHBseW1hdGNoIE5zIFZzIEV4cCAoYWxsJycgUikgViA6LSBzaWdtYSBYXCBhcHBseW1hdGNoIE5zIChhcml0eTIgWDo6VnMpIEV4cCAoUiBYKSBWLgphcHBseW1hdGNoIE5zIFZzIEV4cCAobmFiICAgUikgViA6LSBwaSB4XCAgICBhcHBseW1hdGNoIFsoY29weSBOIHgpfE5zXSBWcyBFeHAgKFIgeCkgVi4KYXBwbHltYXRjaCBOcyBWcyBFeHAgKEV4cCcgPT0+IFJlc3VsdCkgViA6LQogICgocGkgTlwgcGkgWFwgKGNvcHkgTiBYKSA6LSBtZW1iZXIgKGNvcHkgTiBYKSBOcykgPT4gKHBpIE5cIGNvcHkgTiBOIDotIG5vbSBOKSA9PiAoY29weSBFeHAgRXhwJykpLAogIG1hcHByZWQgKEFcTlwgc2lnbWEgWFwgKChjb3B5IE4gWCkgPSBBKSkgTnMgTm9tcywKICAoZm9yZWFjaCBub20gTm9tcyksCiAgKGRpc3RpbmN0IE5vbXMpLAogICgocGkgTlwgcGkgWFwgKChjb3B5IE4gWCkgOi0gbWVtYmVyIChjb3B5IFggTikgTnMpKSA9PiAocGkgTlwgY29weSBOIE4gOi0gbm9tIE4pID0+IChjb3B5IFJlc3VsdCBWKSksCiAgKGZvcmVhY2ggKG5vdF9zdXBwb3J0ZWQgTm9tcykgVnMpLgoKbm90X3N1cHBvcnRlZCBOb21zIChhcml0eTAgVCkgOi0gbm90c3VwIE5vbXMgVC4Kbm90X3N1cHBvcnRlZCBOb21zIChhcml0eTEgVCkgOi0gcGkgeFwgY29weSB4IHggPT4gbm90c3VwIE5vbXMgKFQgeCkuCm5vdF9zdXBwb3J0ZWQgTm9tcyAoYXJpdHkyIFQpIDotIHBpIHhcIGNvcHkgeCB4ID0+IHBpIHlcIGNvcHkgeSB5ID0+IG5vdHN1cCBOb21zIChUIHggeSkuCgpub3RzdXAgTm9tcyBUIDotIChwaSBOXCBjb3B5IE4gTiA6LSBub20gTiwgbm90KG1lbWJlciBOIE5vbXMpKSA9PiBjb3B5IFQgVC4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlJSAgICBUaGUgdW50eXBlZCBkYXRhdHlwZQp2YWwgKGFiIF8pICYgdmFsIChhcCBfIF8pLiAgJSBPYmplY3QtbGV2ZWwgdW50eXBlZCBsYW1iZGEtdGVybXMKCmNvcHkgKGFidCBSKSAgIChhYnQgUykgICA6LSBwaSB4XCBjb3B5IHggeCA9PiBjb3B5IChSIHgpIChTIHgpLgpjb3B5IChhYiBSKSAgICAoYWIgUykgICAgOi0gcGkgeFwgY29weSB4IHggPT4gY29weSAoUiB4KSAoUyB4KS4KY29weSAoYXAgIFggWSkgKGFwICBVIFYpIDotIGNvcHkgWCBVLCBjb3B5IFkgVi4KCnNwZWNpYWwgMiBhcHAuCmV2YWxfc3BlYyBhcHAgICAgIChVOjpWOjpbXSkgKGFwIFYgVSkuCgpldmFsICAoYWJ0IFIpIChhYiBTKSAgICA6LSBmaXhidWcgUiwgcGluIHhcIGV2YWwgKFIgeCkgKFMgeCkuCmFwcGx5IChhYiAgUikgVCAoUiBUKS4KJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUlICAgIFRoZSBpbnRlZ2VyIGRhdGF0eXBlCnZhbCAoaSBfKS4KY29weSAoaSBOKSAoaSBOKS4KCnNwZWNpYWwgMSB6ZXJvcCAgJiBzcGVjaWFsIDIgbWludXMgJiBzcGVjaWFsIDIgc3VtICAgJiBzcGVjaWFsIDIgdGltZXMgJgpzcGVjaWFsIDIgZ3JlYXRlci4KCmV2YWxfc3BlYyBtaW51cyAgICgoaSBOKTo6KGkgTSk6OltdKSAoaSBWKSA6LSBWIGlzIE0gLSBOLgpldmFsX3NwZWMgc3VtICAgICAoKGkgTik6OihpIE0pOjpbXSkgKGkgVikgOi0gViBpcyBNICsgTi4KZXZhbF9zcGVjIHRpbWVzICAgKChpIE4pOjooaSBNKTo6W10pIChpIFYpIDotIFYgaXMgTSAqIE4uCmV2YWxfc3BlYyB6ZXJvcCAgICgoaSBOKTo6W10pIFYgICAgICAgIDotIGlmIChOID0gMCkgKFYgPSB0dCkgKFYgPSBmZikuCmV2YWxfc3BlYyBncmVhdGVyICgoaSBOKTo6KGkgTSk6OltdKSBWIDotIGlmIChNID4gTikgKFYgPSB0dCkgKFYgPSBmZikuCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlJSAgICBUaGUgYm9vbCBkYXRhdHlwZQp2YWwgdHQuCnZhbCBmZi4KY29weSBmZiBmZi4KY29weSB0dCB0dC4Kc3BlY2lhbCAyIG9yICAgICAmIHNwZWNpYWwgMiBhbmQgICAmIHNwZWNpYWwgMiBlcXVhbC4KZXZhbF9zcGVjIGFuZCAgICAgKEM6OkI6OltdKSBWIDotIGlmIChCID0gZmYpIChWID0gZmYpIChpZiAoQyA9IGZmKSAoViA9IGZmKSAoViA9IHR0KSkuCmV2YWxfc3BlYyBvciAgICAgIChDOjpCOjpbXSkgViA6LSBpZiAoQiA9IHR0KSAoViA9IHR0KSAoaWYgKEMgPSB0dCkgKFYgPSB0dCkgKFYgPSBmZikpLgpldmFsX3NwZWMgZXF1YWwgICAoQzo6Qjo6W10pIFYgOi0gaWYgKEIgPSBDKSAgKFYgPSB0dCkgKFYgPSBmZikuCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlJSAgICBUaGUgbGlzdCBkYXRhdHlwZQp2YWwgKGNucyBfIF8pICYgdmFsIG51bGwuCmNvcHkgbnVsbCBudWxsLgpjb3B5IChjbnMgWCBZKSAoY25zIFUgVikgOi0gY29weSBYIFUsIGNvcHkgWSBWLgpldmFsX3NwZWMgY29ucyAgICAoVTo6Vjo6W10pIChjbnMgViBVKS4Kc3BlY2lhbCAxIGNhciAgICAmIHNwZWNpYWwgMSBjZHIgICAgJiBzcGVjaWFsIDIgY29ucyAgJiBzcGVjaWFsIDEgbnVsbHAgJiBzcGVjaWFsIDEgY29uc3AuCiUgICBEZWNvbnN0cnVjdG9ycyBhbmQgcHJlZGljYXRlcyBhcmUgbm90IG5lZWRlZCBub3cgdGhhdCB3ZSBoYXZlIHBhdHRlcm4gbWF0Y2hpbmcuCmV2YWxfc3BlYyBjYXIgICAgICgoY25zIFYgVSk6OltdKSBWLgpldmFsX3NwZWMgY2RyICAgICAoKGNucyBWIFUpOjpbXSkgVS4KZXZhbF9zcGVjIG51bGxwICAgKFU6OltdKSBWIDotIGlmIChVID0gbnVsbCkgKFYgPSB0dCkgKFYgPSBmZikuCmV2YWxfc3BlYyBjb25zcCAgIChVOjpbXSkgViA6LSBpZiAoVSA9IG51bGwpIChWID0gZmYpIChWID0gdHQpLgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSUgICAgVGhlIHBhaXJpbmcgZGF0YXR5cGUKdmFsIChwciBfIF8pLgpzcGVjaWFsIDIgcGFpci4KZXZhbF9zcGVjIHBhaXIgICAoVTo6Vjo6W10pIChwciBWIFUpLgpjb3B5IChwciBYIFkpIChwciBVIFYpIDotIGNvcHkgWCBVLCBjb3B5IFkgVi4K" }; { name = "core/eval.sig"; text = "c2lnIGV2YWwuCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgoKJSBDb252ZXJ0aW5nIHRvIHN0cmluZyBmb3JjZXMgbm9ybWFsaXphdGlvbiBhbmQgZml4ZXMgc29tZSBlbmRsZXNzIGN5Y2xpbmcKdHlwZSBmaXhidWcgICBBIC0+IHByb3AuCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBBYnN0cmFjdCBzeW50YXgKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQpraW5kIHRtICAgICAgIHR5cGUuCiUgU3BlY2lhbCBmb3JtczogdGhlc2UgaGF2ZSB0aGVpciBvd24gZXZhbHVhdGlvbiBjbGF1c2VzCnR5cGUgYXJvYmFzZSAgICAgICAgdG0gLT4gdG0gLT4gdG0uICAgICAgICAgICAgICAgICUgYXBwbGljYXRpb24KdHlwZSBsYW0gICAgICAodG0gLT4gdG0pIC0+IHRtLiAgICAgICAgICAgICAgJSBmdW5jdGlvbiBhYnN0cmFjdGlvbgp0eXBlIGNvbmQgICAgIHRtIC0+IHRtIC0+IHRtIC0+IHRtLiAgICAgICAgICAlIGNvbmRpdGlvbmFsCnR5cGUgZml4cHQgICAgKHRtIC0+IHRtKSAtPiB0bS4gICAgICAgICAgICAgICUgcmVjdXJzaXZlIGZ1bmN0aW9ucwp0eXBlIGxldCAgICAgIHRtIC0+ICh0bSAtPiB0bSkgLT4gdG0uICAgICAgICAlIGxldCBiaW5kaW5nCnR5cGUgc3BlYyAgICAgaW50IC0+IHRtIC0+IGxpc3QgdG0gLT4gdG0uICAgICUgZm9yIHRyZWF0bWVudCBvZiBzcGVjaWFscwppbmZpeGwgICAgICAgIGFyb2Jhc2UgNC4KJSBUaGUgYmFzaWMgY29uc3RhbnRzIG9mIHRoZSBsYW5ndWFnZQp0eXBlIGkgICAgICAgICAgICAgICAgICAgICAgIGludCAgICAgLT4gdG0uICAlIGludGVnZXJzCnR5cGUgY25zICAgICAgICAgICAgICAgICAgICB0bSAtPiB0bSAtPiB0bS4gICUgbGlzdCBjb25zdHJ1Y3RvciAodmFsdWUgc3BhY2UpCnR5cGUgYW5kLCBvciwgZmYsIHR0ICAgICAgICAgICAgICAgICAgICB0bS4gICUgYm9vbGVhbiBmdW5jdGlvbnMgYW5kIGNvbnN0YW50cwp0eXBlIGNvbnMsIGNhciwgY2RyLCBudWxsLCBudWxscCwgY29uc3AgdG0uICAlIGxpc3QgZnVuY3Rpb25zIGFuZCBjb25zdGFudHMKdHlwZSBncmVhdGVyLCB6ZXJvcCwgbWludXMsIHN1bSwgdGltZXMgIHRtLiAgJSBpbnRlZ2VyIGZ1bmN0aW9ucyBhbmQgcHJlZGljYXRlcwp0eXBlIGVxdWFsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG0uICAlIEdlbmVyYWwgZXF1YWxpdHkKCnR5cGUgcHIgICAgICAgICAgIHRtIC0+IHRtIC0+IHRtLgp0eXBlIHBhaXIgICAgICAgICB0bS4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlIEJpZyBzdGVwIGV2YWx1YXRpb24KJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQp0eXBlIHZhbCAgICAgICAgICAgdG0gLT4gcHJvcC4KdHlwZSBldmFsICAgICAgICAgIHRtIC0+IHRtIC0+IHByb3AuCnR5cGUgYXBwbHkgICAgICAgICB0bSAtPiB0bSAtPiB0bSAtPiBwcm9wLgp0eXBlIGV2YWxfc3BlYyAgICAgdG0gLT4gbGlzdCB0bSAtPiB0bSAtPiBwcm9wLgp0eXBlIHNwZWNpYWwgICAgICAgaW50IC0+IHRtIC0+IHByb3AuCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBOZXcgY29uc3RydWN0aW9ucwolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCnR5cGUgbm9tICAgICAgICB0bSAtPiBwcm9wLiAgICAgICAgICAgICUgbm9taW5hbCB0ZXJtcwp0eXBlIG5ldyAgICAgICAgICh0bSAtPiB0bSkgLT4gdG0uCgolJSBUaGUgYWRkaXRpb24gb2YgdW50eXBlZCBsYW1iZGEtdGVybXMgYXMgZXhwcmVzc2lvbnMgKGFidC9hcHApIGFuZAolJSBhcyB2YWx1ZXMgKGFiL2FwKS4KdHlwZSBhcHAgICAgICAgIHRtLiAgICAgICAgICAgICAgICAgJSBleHByZXNzaW9uIAp0eXBlIGFidCAgICAgICAgKHRtIC0+IHRtKSAtPiB0bS4gICAlIGV4cHJlc3Npb24gCnR5cGUgYXAgICAgICAgICB0bSAtPiB0bSAtPiB0bS4gICAgICUgdmFsdWUgc3BhY2UKdHlwZSBhYiAgICAgICAgICh0bSAtPiB0bSkgLT4gdG0uICAgJSB2YWx1ZSBzcGFjZQoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUlIFN0YWdpbmcgYXJlYSB0byBkZXZlbG9wIGEgbW9yZSBnZW5lcmFsIHBhdHRlcm4gbWF0Y2hpbmcgbWVjaGFuaXNtCiUlJSUgd2l0aCB0aGUgcG9zc2liaWxpdHkgb2YgdXNpbmcgbm9taW5hbCBhYnN0cmFjdGlvbnMuCmtpbmQgcnVsZXh4eHh4eCB0eXBlLgp0eXBlID09PiAgICAgICAgICAgIHRtIC0+IHRtIC0+IHJ1bGV4eHh4eHguCmluZml4ciAgPT0+IDUuCnR5cGUgbmFiICAgICAgICAgICAgKHRtIC0+IHJ1bGV4eHh4eHgpIC0+IHJ1bGV4eHh4eHguCnR5cGUgYWxsICAgICAgICAgICAgKHRtICAtPiBydWxleHh4eHh4KSAtPiBydWxleHh4eHh4LiAgICAgICAgICAgICAgICUgRm9yIHBhdHRlcm4gdmFyaWFibGVzIHRoYXQgYXJlIG5vdCBhYnN0cmFjdGlvbnMuCnR5cGUgYWxsJyAgICAgICAgICAgKCh0bSAtPiB0bSkgLT4gcnVsZXh4eHh4eCkgLT4gcnVsZXh4eHh4eC4gICAgICAgICUgRm9yIHBhdHRlcm4gdmFyaWFibGVzIHRoYXQgYXJlIGFic3RyYWN0aW9ucy4KdHlwZSBhbGwnJyAgICAgICAgICAoKHRtIC0+IHRtIC0+IHRtKSAtPiBydWxleHh4eHh4KSAtPiBydWxleHh4eHh4LiAgJSBGb3IgcGF0dGVybiB2YXJpYWJsZXMgdGhhdCBhcmUgYWJzdHJhY3Rpb25zIG9mIHR3byB2YXJpYWJsZXMuCgp0eXBlIG1hdGNoICAgICAgICAgIHRtIC0+IGxpc3QgcnVsZXh4eHh4eCAtPiB0bS4KdHlwZSBtYXRjaGluZyAgICAgICB0bSAtPiBsaXN0IHJ1bGV4eHh4eHggLT4gdG0gLT4gcHJvcC4KdHlwZSBhcHBseW1hdGNoICAgIGxpc3QgcHJvcCAgLT4gbGlzdCBpdGVtIC0+IHRtIC0+IHJ1bGV4eHh4eHggLT4gdG0gLT4gcHJvcC4KCnR5cGUgbm90X3N1cHBvcnRlZCAgbGlzdCB0bSAtPiBpdGVtIC0+IHByb3AuCnR5cGUgbm90c3VwICAgICAgICAgbGlzdCB0bSAtPiB0bSAtPiBwcm9wLgoKa2luZCBpdGVtICAgICAgICAgICB0eXBlLgp0eXBlIGFyaXR5MCAgICAgICAgIHRtIC0+IGl0ZW0uCnR5cGUgYXJpdHkxICAgICAgICAgKHRtIC0+IHRtKSAtPiBpdGVtLgp0eXBlIGFyaXR5MiAgICAgICAgICh0bSAtPiB0bSAtPiB0bSkgLT4gaXRlbS4KdHlwZSBhcml0eTMgICAgICAgICAodG0gLT4gdG0gLT4gdG0gLT4gdG0pIC0+IGl0ZW0uCgp0eXBlIGNvcHkgICAgICAgICAgIHRtIC0+IHRtIC0+IHByb3AuCnR5cGUgY29weXJ1bGV4eHh4eHggICAgICAgcnVsZXh4eHh4eCAtPiBydWxleHh4eHh4IC0+IHByb3AuCnR5cGUgcGluICAgICAgICAgICAgKHRtIC0+IHByb3ApIC0+IHByb3AuCg==" }; { name = "core/eval.sig~"; text = "c2lnIGV2YWwuCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgoKJSBDb252ZXJ0aW5nIHRvIHN0cmluZyBmb3JjZXMgbm9ybWFsaXphdGlvbiBhbmQgZml4ZXMgc29tZSBlbmRsZXNzIGN5Y2xpbmcKdHlwZSBmaXhidWcgICBBIC0+IHByb3AuCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBBYnN0cmFjdCBzeW50YXgKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQpraW5kIHRtICAgICAgIHR5cGUuCiUgU3BlY2lhbCBmb3JtczogdGhlc2UgaGF2ZSB0aGVpciBvd24gZXZhbHVhdGlvbiBjbGF1c2VzCnR5cGUgQCAgICAgICAgdG0gLT4gdG0gLT4gdG0uICAgICAgICAgICAgICAgICUgYXBwbGljYXRpb24KdHlwZSBsYW0gICAgICAodG0gLT4gdG0pIC0+IHRtLiAgICAgICAgICAgICAgJSBmdW5jdGlvbiBhYnN0cmFjdGlvbgp0eXBlIGNvbmQgICAgIHRtIC0+IHRtIC0+IHRtIC0+IHRtLiAgICAgICAgICAlIGNvbmRpdGlvbmFsCnR5cGUgZml4cHQgICAgKHRtIC0+IHRtKSAtPiB0bS4gICAgICAgICAgICAgICUgcmVjdXJzaXZlIGZ1bmN0aW9ucwp0eXBlIGxldCAgICAgIHRtIC0+ICh0bSAtPiB0bSkgLT4gdG0uICAgICAgICAlIGxldCBiaW5kaW5nCnR5cGUgc3BlYyAgICAgaW50IC0+IHRtIC0+IGxpc3QgdG0gLT4gdG0uICAgICUgZm9yIHRyZWF0bWVudCBvZiBzcGVjaWFscwppbmZpeGwgICAgICAgIEAgNC4KJSBUaGUgYmFzaWMgY29uc3RhbnRzIG9mIHRoZSBsYW5ndWFnZQp0eXBlIGkgICAgICAgICAgICAgICAgICAgICAgIGludCAgICAgLT4gdG0uICAlIGludGVnZXJzCnR5cGUgY25zICAgICAgICAgICAgICAgICAgICB0bSAtPiB0bSAtPiB0bS4gICUgbGlzdCBjb25zdHJ1Y3RvciAodmFsdWUgc3BhY2UpCnR5cGUgYW5kLCBvciwgZmYsIHR0ICAgICAgICAgICAgICAgICAgICB0bS4gICUgYm9vbGVhbiBmdW5jdGlvbnMgYW5kIGNvbnN0YW50cwp0eXBlIGNvbnMsIGNhciwgY2RyLCBudWxsLCBudWxscCwgY29uc3AgdG0uICAlIGxpc3QgZnVuY3Rpb25zIGFuZCBjb25zdGFudHMKdHlwZSBncmVhdGVyLCB6ZXJvcCwgbWludXMsIHN1bSwgdGltZXMgIHRtLiAgJSBpbnRlZ2VyIGZ1bmN0aW9ucyBhbmQgcHJlZGljYXRlcwp0eXBlIGVxdWFsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG0uICAlIEdlbmVyYWwgZXF1YWxpdHkKCnR5cGUgcHIgICAgICAgICAgIHRtIC0+IHRtIC0+IHRtLgp0eXBlIHBhaXIgICAgICAgICB0bS4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlIEJpZyBzdGVwIGV2YWx1YXRpb24KJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQp0eXBlIHZhbCAgICAgICAgICAgdG0gLT4gcHJvcC4KdHlwZSBldmFsICAgICAgICAgIHRtIC0+IHRtIC0+IHByb3AuCnR5cGUgYXBwbHkgICAgICAgICB0bSAtPiB0bSAtPiB0bSAtPiBwcm9wLgp0eXBlIGV2YWxfc3BlYyAgICAgdG0gLT4gbGlzdCB0bSAtPiB0bSAtPiBwcm9wLgp0eXBlIHNwZWNpYWwgICAgICAgaW50IC0+IHRtIC0+IHByb3AuCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBOZXcgY29uc3RydWN0aW9ucwolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCnR5cGUgbm9tICAgICAgICB0bSAtPiBwcm9wLiAgICAgICAgICAgICUgbm9taW5hbCB0ZXJtcwp0eXBlIG5ldyAgICAgICAgICh0bSAtPiB0bSkgLT4gdG0uCgolJSBUaGUgYWRkaXRpb24gb2YgdW50eXBlZCBsYW1iZGEtdGVybXMgYXMgZXhwcmVzc2lvbnMgKGFidC9hcHApIGFuZAolJSBhcyB2YWx1ZXMgKGFiL2FwKS4KdHlwZSBhcHAgICAgICAgIHRtLiAgICAgICAgICAgICAgICAgJSBleHByZXNzaW9uIAp0eXBlIGFidCAgICAgICAgKHRtIC0+IHRtKSAtPiB0bS4gICAlIGV4cHJlc3Npb24gCnR5cGUgYXAgICAgICAgICB0bSAtPiB0bSAtPiB0bS4gICAgICUgdmFsdWUgc3BhY2UKdHlwZSBhYiAgICAgICAgICh0bSAtPiB0bSkgLT4gdG0uICAgJSB2YWx1ZSBzcGFjZQoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUlIFN0YWdpbmcgYXJlYSB0byBkZXZlbG9wIGEgbW9yZSBnZW5lcmFsIHBhdHRlcm4gbWF0Y2hpbmcgbWVjaGFuaXNtCiUlJSUgd2l0aCB0aGUgcG9zc2liaWxpdHkgb2YgdXNpbmcgbm9taW5hbCBhYnN0cmFjdGlvbnMuCgpraW5kIHJ1bGUgICAgICAgICAgIHR5cGUuCnR5cGUgPT0+ICAgICAgICAgICAgdG0gLT4gdG0gLT4gcnVsZS4KaW5maXhyICA9PT4gNS4KdHlwZSBuYWIgICAgICAgICAgICAodG0gLT4gcnVsZSkgLT4gcnVsZS4KdHlwZSBhbGwgICAgICAgICAgICAodG0gIC0+IHJ1bGUpIC0+IHJ1bGUuICAgICAgICAgICAgICAgJSBGb3IgcGF0dGVybiB2YXJpYWJsZXMgdGhhdCBhcmUgbm90IGFic3RyYWN0aW9ucy4KdHlwZSBhbGwnICAgICAgICAgICAoKHRtIC0+IHRtKSAtPiBydWxlKSAtPiBydWxlLiAgICAgICAgJSBGb3IgcGF0dGVybiB2YXJpYWJsZXMgdGhhdCBhcmUgYWJzdHJhY3Rpb25zLgp0eXBlIGFsbCcnICAgICAgICAgICgodG0gLT4gdG0gLT4gdG0pIC0+IHJ1bGUpIC0+IHJ1bGUuICAlIEZvciBwYXR0ZXJuIHZhcmlhYmxlcyB0aGF0IGFyZSBhYnN0cmFjdGlvbnMgb2YgdHdvIHZhcmlhYmxlcy4KCnR5cGUgbWF0Y2ggICAgICAgICAgdG0gLT4gbGlzdCBydWxlIC0+IHRtLgp0eXBlIG1hdGNoaW5nICAgICAgIHRtIC0+IGxpc3QgcnVsZSAtPiB0bSAtPiBwcm9wLgp0eXBlIGFwcGx5bWF0Y2ggICAgbGlzdCBwcm9wICAtPiBsaXN0IGl0ZW0gLT4gdG0gLT4gcnVsZSAtPiB0bSAtPiBwcm9wLgoKdHlwZSBub3Rfc3VwcG9ydGVkICBsaXN0IHRtIC0+IGl0ZW0gLT4gcHJvcC4KdHlwZSBub3RzdXAgICAgICAgICBsaXN0IHRtIC0+IHRtIC0+IHByb3AuCgpraW5kIGl0ZW0gICAgICAgICAgIHR5cGUuCnR5cGUgYXJpdHkwICAgICAgICAgdG0gLT4gaXRlbS4KdHlwZSBhcml0eTEgICAgICAgICAodG0gLT4gdG0pIC0+IGl0ZW0uCnR5cGUgYXJpdHkyICAgICAgICAgKHRtIC0+IHRtIC0+IHRtKSAtPiBpdGVtLgp0eXBlIGFyaXR5MyAgICAgICAgICh0bSAtPiB0bSAtPiB0bSAtPiB0bSkgLT4gaXRlbS4KCnR5cGUgY29weSAgICAgICAgICAgdG0gLT4gdG0gLT4gcHJvcC4KdHlwZSBjb3B5cnVsZSAgICAgICBydWxlIC0+IHJ1bGUgLT4gcHJvcC4KdHlwZSBwaW4gICAgICAgICAgICAodG0gLT4gcHJvcCkgLT4gcHJvcC4K" }; { name = "core/json.mod"; text = "bW9kdWxlIGpzb24uCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUgSGlkZGVuIHNpZ25hdHVyZSBvZiB0aGUgbW9kdWxlICUlJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKdHlwZSBzdHJpbmdfb2ZfanNvbl9hcnJheSAobGlzdCBqc29uX3ZhbCkgLT4gc3RyaW5nIC0+IHByb3AuCnR5cGUgc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IChsaXN0IGpzb25fdmFsKSAtPiBzdHJpbmcgLT4gcHJvcC4KdHlwZSBzdHJpbmdfb2ZfanNvbl92YWwganNvbl92YWwgLT4gc3RyaW5nIC0+IHByb3AuCgp0eXBlIHN0cmluZ19vZl9qc29uX2F1eCBqc29uIC0+IHN0cmluZyAtPiBwcm9wLgoKdHlwZSBxdW90ZWQgc3RyaW5nIC0+IHN0cmluZyAtPiBwcm9wLgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSBTdHJpbmcgZXNjYXBpbmcgJSUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgp0eXBlIGVzY2FwZV9hdXggc3RyaW5nIC0+IGludCAtPiBzdHJpbmcgLT4gcHJvcC4KCmVzY2FwZSBTIFMnIDotCiAgICAgICBTaXplIGlzICgoc2l6ZSBTKSAtIDEpLAogICAgICAgZXNjYXBlX2F1eCBTIFNpemUgUycuCiAgICAgICAKZXNjYXBlX2F1eCBfIEkgIiIgOi0gSSA8IDAsICEuCmVzY2FwZV9hdXggUyBJIFMnIDotCgkgICBJID49IDAsCgkgICBDaGFyIGlzIHN1YnN0cmluZyBTIEkgMSwKCSAgIEknIGlzIEkgLSAxLAoJICAgZXNjYXBlX2F1eCBTIEknIFMnJywKCSAgIGlmIChDaGFyID0gIlwiIjsgQ2hhciA9ICJcXCIpCgkgICAgICAoUycgaXMgKFMnJyBeICJcXCIgXiBDaGFyICkpCgkgICAgICAoaWYgKCBDaGFyID0gIlxuIjsgQ2hhciA9ICJcdCIpCgkgICAgICAJICAoUycgaXMgUycnKQoJCSAgKFMnIGlzIChTJycgXiBDaGFyKSkpLgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBKc29uIG1hZ2lrIDogJSUlCiUlJSUlJSUlJSUlJSUlJSUlJSUlCgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfc3RyaW5nIFN0cikgUyA6LSBxdW90ZWQgU3RyIFMuCnN0cmluZ19vZl9qc29uX3ZhbCAodl9pbnQgSSkgUyA6LSBTIGlzIChpbnRfdG9fc3RyaW5nIEkpLgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfb2JqZWN0IEopIFMgOi0gc3RyaW5nX29mX2pzb24gSiBTLgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfYXJyYXkgQSkgUyA6LSBzdHJpbmdfb2ZfanNvbl9hcnJheSBBIFMuCnN0cmluZ19vZl9qc29uX3ZhbCAodl90cnVlKSAidHJ1ZSIuCnN0cmluZ19vZl9qc29uX3ZhbCAodl9mYWxzZSkgImZhbHNlIi4Kc3RyaW5nX29mX2pzb25fdmFsICh2X251bGwpICJudWxsIi4KCnN0cmluZ19vZl9qc29uX2FycmF5IEEgUyA6LQogICAgc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IEEgUycsCiAgICBTIGlzICJbIiBeIFMnIF4gIl0iLgoKc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IFtdICIiLgpzdHJpbmdfb2ZfanNvbl9hcnJheV9hdXggKFY6OltdKSBTIDotCiAgICBzdHJpbmdfb2ZfanNvbl92YWwgViBTLCAhLgpzdHJpbmdfb2ZfanNvbl9hcnJheV9hdXggKFY6OlRMKSBTIDotCiAgICBzdHJpbmdfb2ZfanNvbl92YWwgViBTViwKICAgIHN0cmluZ19vZl9qc29uX2FycmF5X2F1eCBUTCBTVEwsCiAgICBTIGlzIFNWIF4gIiwgIiBeIFNUTC4KCgpzdHJpbmdfb2ZfanNvbiBKIFMgOi0KICAgIHN0cmluZ19vZl9qc29uX2F1eCBKIFNKLAogICAgUyBpcyAieyAiIF4gU0ogXiAiIH0iLgogICAgCnN0cmluZ19vZl9qc29uX2F1eCAob2JqZWN0IFtdKSAiIi4Kc3RyaW5nX29mX2pzb25fYXV4IChvYmplY3QgKChrdiBLIFYpOjpbXSkpIFMgOi0KICAgIHN0cmluZ19vZl9qc29uX3ZhbCBWIFNWLAogICAgcXVvdGVkIEsgU0ssCiAgICBTIGlzIFNLIF4gIjogIiBeIFNWLCAhLgpzdHJpbmdfb2ZfanNvbl9hdXggKG9iamVjdCgoa3YgSyBWKTo6VEwpKSBTIDotCiAgICBzdHJpbmdfb2ZfanNvbl92YWwgViBTViwgcXVvdGVkIEsgU0ssCiAgICBzdHJpbmdfb2ZfanNvbl9hdXggKG9iamVjdCBUTCkgU1RMLAogICAgUyBpcyBTSyBeICI6ICIgXiBTViBeICIsICIgXiBTVEwuCgpxdW90ZWQgUyBTJyA6LSBTJyBpcyAiXCIiIF4gUyBeICJcIiIuCgpqc29uX25ldyAob2JqZWN0KFtdKSkuCgpqc29uX2FkZF92YWwJSyBWIChvYmplY3QoTCkpIChvYmplY3QoKGt2IEsgVik6OkwpKS4KanNvbl9hZGRfc3RyaW5nIEsgU1YgKG9iamVjdChMKSkgKG9iamVjdCgoa3YgSyAodl9zdHJpbmcgU1YnKSk6OkwpKSA6LQoJCWVzY2FwZSBTViBTVicuCmpzb25fYWRkX2ludAlLIElWIChvYmplY3QoTCkpIChvYmplY3QoKGt2IEsgKHZfaW50IElWKSk6OkwpKS4KCmpzb25fYXJyYXlfZnJvbV9zdHJpbmdfbGlzdCBbXSAodl9hcnJheSBbXSkuCmpzb25fYXJyYXlfZnJvbV9zdHJpbmdfbGlzdCAoUzo6VEwpICh2X2FycmF5ICgodl9zdHJpbmcgUycpOjpBKSkgOi0KICBlc2NhcGUgUyBTJywKICBqc29uX2FycmF5X2Zyb21fc3RyaW5nX2xpc3QgVEwgKHZfYXJyYXkgQSkuCgpqc29uX2FycmF5X2Zyb21fanNvbl9saXN0IFtdICh2X2FycmF5IFtdKS4KanNvbl9hcnJheV9mcm9tX2pzb25fbGlzdCAoUzo6VEwpICh2X2FycmF5ICgodl9vYmplY3QgUyk6OkEpKSA6LQogIGpzb25fYXJyYXlfZnJvbV9qc29uX2xpc3QgVEwgKHZfYXJyYXkgQSkuCgpqc29uX3Rlc3QgKG9iamVjdCgoa3YgInRvdG8iICh2X2ludCAzKSkKCSAgCSAgICAgIDo6KGt2ICJ0YXRhIiAodl9hcnJheSAoKHZfdHJ1ZSkKCQkgICAgICAJICAgIAkgICAJICAgIDo6dl9mYWxzZTo6W10KCQkJCQkgICAgKSkpOjpbXSkpLgoKIHRlc3QgUyA6LSBTIGlzIChpbnRfdG9fc3RyaW5nIDMpLgo=" }; { name = "core/json.mod~"; text = "bW9kdWxlIGpzb24uCgolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUgSGlkZGVuIHNpZ25hdHVyZSBvZiB0aGUgbW9kdWxlICUlJQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKdHlwZSBzdHJpbmdfb2ZfanNvbl9hcnJheSAobGlzdCBqc29uX3ZhbCkgLT4gc3RyaW5nIC0+IG8uCnR5cGUgc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IChsaXN0IGpzb25fdmFsKSAtPiBzdHJpbmcgLT4gby4KdHlwZSBzdHJpbmdfb2ZfanNvbl92YWwganNvbl92YWwgLT4gc3RyaW5nIC0+IG8uCgp0eXBlIHN0cmluZ19vZl9qc29uX2F1eCBqc29uIC0+IHN0cmluZyAtPiBvLgoKdHlwZSBxdW90ZWQgc3RyaW5nIC0+IHN0cmluZyAtPiBvLgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSBTdHJpbmcgZXNjYXBpbmcgJSUKJSUlJSUlJSUlJSUlJSUlJSUlJSUlCgp0eXBlIGVzY2FwZV9hdXggc3RyaW5nIC0+IGludCAtPiBzdHJpbmcgLT4gby4KCmVzY2FwZSBTIFMnIDotCiAgICAgICBTaXplIGlzICgoc2l6ZSBTKSAtIDEpLAogICAgICAgZXNjYXBlX2F1eCBTIFNpemUgUycuCiAgICAgICAKZXNjYXBlX2F1eCBTIEkgIiIgOi0gSSA8IDAsICEuCmVzY2FwZV9hdXggUyBJIFMnIDotCgkgICBJID49IDAsCgkgICBDaGFyIGlzIHN1YnN0cmluZyBTIEkgMSwgCgkgICBJJyBpcyBJIC0gMSwKCSAgIGVzY2FwZV9hdXggUyBJJyBTJycsCgkgICBpZiAoQ2hhciA9ICJcIiI7IENoYXIgPSAiXFwiKQoJICAgICAgKFMnIGlzIFMnJyBeICJcXCIgXiBDaGFyKQoJICAgICAgKFMnIGlzIFMnJyBeIENoYXIpLgoKCiUlJSUlJSUlJSUlJSUlJSUlJSUlCiUlJSBKc29uIG1hZ2lrIDogJSUlCiUlJSUlJSUlJSUlJSUlJSUlJSUlCgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfc3RyaW5nIFN0cikgUyA6LSBxdW90ZWQgU3RyIFMuCnN0cmluZ19vZl9qc29uX3ZhbCAodl9pbnQgSSkgUyA6LSBTIGlzIGludF90b19zdHJpbmcgSS4Kc3RyaW5nX29mX2pzb25fdmFsICh2X29iamVjdCBKKSBTIDotIHN0cmluZ19vZl9qc29uIEogUy4Kc3RyaW5nX29mX2pzb25fdmFsICh2X2FycmF5IEEpIFMgOi0gc3RyaW5nX29mX2pzb25fYXJyYXkgQSBTLgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfdHJ1ZSkgInRydWUiLgpzdHJpbmdfb2ZfanNvbl92YWwgKHZfZmFsc2UpICJmYWxzZSIuCnN0cmluZ19vZl9qc29uX3ZhbCAodl9udWxsKSAibnVsbCIuCgpzdHJpbmdfb2ZfanNvbl9hcnJheSBBIFMgOi0KICAgIHN0cmluZ19vZl9qc29uX2FycmF5X2F1eCBBIFMnLAogICAgUyBpcyAiWyIgXiBTJyBeICJdIi4KCnN0cmluZ19vZl9qc29uX2FycmF5X2F1eCBbXSAiIi4Kc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IChWOjpbXSkgUyA6LQogICAgc3RyaW5nX29mX2pzb25fdmFsIFYgUywgIS4Kc3RyaW5nX29mX2pzb25fYXJyYXlfYXV4IChWOjpUTCkgUyA6LQogICAgc3RyaW5nX29mX2pzb25fdmFsIFYgU1YsCiAgICBzdHJpbmdfb2ZfanNvbl9hcnJheV9hdXggVEwgU1RMLAogICAgUyBpcyBTViBeICIsICIgXiBTVEwuCgoKc3RyaW5nX29mX2pzb24gSiBTIDotCiAgICBzdHJpbmdfb2ZfanNvbl9hdXggSiBTSiwKICAgIFMgaXMgInsgIiBeIFNKIF4gIiB9Ii4KICAgIApzdHJpbmdfb2ZfanNvbl9hdXggKG9iamVjdCBbXSkgIiIuCnN0cmluZ19vZl9qc29uX2F1eCAob2JqZWN0ICgoa3YgSyBWKTo6W10pKSBTIDotCiAgICBzdHJpbmdfb2ZfanNvbl92YWwgViBTViwKICAgIHF1b3RlZCBLIFNLLAogICAgUyBpcyBTSyBeICI6ICIgXiBTViwgIS4Kc3RyaW5nX29mX2pzb25fYXV4IChvYmplY3QoKGt2IEsgVik6OlRMKSkgUyA6LQogICAgc3RyaW5nX29mX2pzb25fdmFsIFYgU1YsIHF1b3RlZCBLIFNLLAogICAgc3RyaW5nX29mX2pzb25fYXV4IChvYmplY3QgVEwpIFNUTCwKICAgIFMgaXMgU0sgXiAiOiAiIF4gU1YgXiAiLCAiIF4gU1RMLgoKcXVvdGVkIFMgUycgOi0gUycgaXMgIlwiIiBeIFMgXiAiXCIiLgoKanNvbl9uZXcgKG9iamVjdChbXSkpLgoKanNvbl9hZGRfdmFsCUsgViAob2JqZWN0KEwpKSAob2JqZWN0KChrdiBLIFYpOjpMKSkuCmpzb25fYWRkX3N0cmluZyBLIFNWIChvYmplY3QoTCkpIChvYmplY3QoKGt2IEsgKHZfc3RyaW5nIFNWJykpOjpMKSkgOi0KCQllc2NhcGUgU1YgU1YnLgpqc29uX2FkZF9pbnQJSyBJViAob2JqZWN0KEwpKSAob2JqZWN0KChrdiBLICh2X2ludCBJVikpOjpMKSkuCgpqc29uX2FycmF5X2Zyb21fc3RyaW5nX2xpc3QgW10gKHZfYXJyYXkgW10pLgpqc29uX2FycmF5X2Zyb21fc3RyaW5nX2xpc3QgKFM6OlRMKSAodl9hcnJheSAoKHZfc3RyaW5nIFMnKTo6QSkpIDotCiAgZXNjYXBlIFMgUycsCiAganNvbl9hcnJheV9mcm9tX3N0cmluZ19saXN0IFRMICh2X2FycmF5IEEpLgoKanNvbl9hcnJheV9mcm9tX2pzb25fbGlzdCBbXSAodl9hcnJheSBbXSkuCmpzb25fYXJyYXlfZnJvbV9qc29uX2xpc3QgKFM6OlRMKSAodl9hcnJheSAoKHZfb2JqZWN0IFMnKTo6QSkpIDotCiAganNvbl9hcnJheV9mcm9tX2pzb25fbGlzdCBUTCAodl9hcnJheSBBKS4KCmpzb25fdGVzdCAob2JqZWN0KChrdiAidG90byIgKHZfaW50IDMpKQoJICAJICAgICAgOjooa3YgInRhdGEiICh2X2FycmF5ICgodl90cnVlKQoJCSAgICAgIAkgICAgCSAgIAkgICAgOjp2X2ZhbHNlCgkJCQkJICAgIDo6W10pKSkKCQkgICAgICA6OltdKSkuCg==" }; { name = "core/json.sig"; text = "c2lnIGpzb24uCmFjY3VtX3NpZyBjb250cm9sLgphY2N1bV9zaWcgdXRpbHMuCgolIEludGVybmFsIHJlcHJlc2VudGF0aW9uIG9mIEpzb24gZG9jdW1lbnRzCiUgU2VlIGh0dHBzOi8vd3d3Lmpzb24ub3JnLyBmb3IgZnVsbCBzcGVjaWZpY2F0aW9uCgpraW5kIGpzb25fdmFsIHR5cGUuCnR5cGUgdl9zdHJpbmcJc3RyaW5nCS0+IGpzb25fdmFsLgp0eXBlIHZfaW50IAlpbnQgLT4ganNvbl92YWwuCnR5cGUgdl9vYmplY3QgICBqc29uIC0+IGpzb25fdmFsLgp0eXBlIHZfYXJyYXkgCShsaXN0IGpzb25fdmFsKSAtPiBqc29uX3ZhbC4KdHlwZSB2X3RydWUgCWpzb25fdmFsLgp0eXBlIHZfZmFsc2UgCWpzb25fdmFsLgp0eXBlIHZfbnVsbAlqc29uX3ZhbC4KCmtpbmQga2V5dmFsIHR5cGUuCnR5cGUga3YJCXN0cmluZyAtPiBqc29uX3ZhbCAtPiBrZXl2YWwuCgpraW5kIGpzb24gdHlwZS4KdHlwZSBvYmplY3QgKGxpc3Qga2V5dmFsKSAtPiBqc29uLgoKCnR5cGUgc3RyaW5nX29mX2pzb24gCSAganNvbiAtPiBzdHJpbmcgLT4gcHJvcC4KCnR5cGUganNvbl9uZXcJCSAganNvbiAtPiBwcm9wLgp0eXBlIGpzb25fYWRkX3ZhbAkgIHN0cmluZyAtPiBqc29uX3ZhbCAtPiBqc29uIC0+IGpzb24gLT4gcHJvcC4KdHlwZSBqc29uX2FkZF9zdHJpbmcJICBzdHJpbmcgLT4gc3RyaW5nIC0+IGpzb24gLT4ganNvbiAtPiBwcm9wLgp0eXBlIGpzb25fYWRkX2ludAkgIHN0cmluZyAtPiBpbnQgLT4ganNvbiAtPiBqc29uIC0+IHByb3AuCgp0eXBlIGpzb25fYXJyYXlfZnJvbV9zdHJpbmdfbGlzdAoJCQkgIChsaXN0IHN0cmluZykgLT4ganNvbl92YWwgLT4gcHJvcC4KCnR5cGUganNvbl9hcnJheV9mcm9tX2pzb25fbGlzdAoJCQkgIChsaXN0IGpzb24pIC0+IGpzb25fdmFsIC0+IHByb3AuCgp0eXBlIGpzb25fdGVzdCAJCSAganNvbiAtPiBwcm9wLgoKdHlwZSB0ZXN0IHN0cmluZyAtPiBwcm9wLgolIGVzY2FwZSAiIGluIHN0cmluZwp0eXBlIGVzY2FwZSBzdHJpbmcgLT4gc3RyaW5nIC0+IHByb3AuCg==" }; { name = "core/json.sig~"; text = "c2lnIGpzb24uCmFjY3VtX3NpZyB1dGlscy4KCiUgSW50ZXJuYWwgcmVwcmVzZW50YXRpb24gb2YgSnNvbiBkb2N1bWVudHMKJSBTZWUgaHR0cHM6Ly93d3cuanNvbi5vcmcvIGZvciBmdWxsIHNwZWNpZmljYXRpb24KCmtpbmQganNvbl92YWwgdHlwZS4KdHlwZSB2X3N0cmluZwlzdHJpbmcJLT4ganNvbl92YWwuCnR5cGUgdl9pbnQgCWludCAtPiBqc29uX3ZhbC4KdHlwZSB2X29iamVjdCAgIGpzb24gLT4ganNvbl92YWwuCnR5cGUgdl9hcnJheSAJKGxpc3QganNvbl92YWwpIC0+IGpzb25fdmFsLgp0eXBlIHZfdHJ1ZSAJanNvbl92YWwuCnR5cGUgdl9mYWxzZSAJanNvbl92YWwuCnR5cGUgdl9udWxsCWpzb25fdmFsLgoKa2luZCBrZXl2YWwgdHlwZS4KdHlwZSBrdgkJc3RyaW5nIC0+IGpzb25fdmFsIC0+IGtleXZhbC4KCmtpbmQganNvbiB0eXBlLgp0eXBlIG9iamVjdCAobGlzdCBrZXl2YWwpIC0+IGpzb24uCgoKdHlwZSBzdHJpbmdfb2ZfanNvbiAJICBqc29uIC0+IHN0cmluZyAtPiBwcm9wLgoKdHlwZSBqc29uX25ldwkJICBqc29uIC0+IHByb3AuCnR5cGUganNvbl9hZGRfdmFsCSAgc3RyaW5nIC0+IGpzb25fdmFsIC0+IGpzb24gLT4ganNvbiAtPiBwcm9wLgp0eXBlIGpzb25fYWRkX3N0cmluZwkgIHN0cmluZyAtPiBzdHJpbmcgLT4ganNvbiAtPiBqc29uIC0+IHByb3AuCnR5cGUganNvbl9hZGRfaW50CSAgc3RyaW5nIC0+IGludCAtPiBqc29uIC0+IGpzb24gLT4gcHJvcC4KCnR5cGUganNvbl9hcnJheV9mcm9tX3N0cmluZ19saXN0CgkJCSAgKGxpc3Qgc3RyaW5nKSAtPiBqc29uX3ZhbCAtPiBwcm9wLgoKdHlwZSBqc29uX2FycmF5X2Zyb21fanNvbl9saXN0CgkJCSAgKGxpc3QganNvbikgLT4ganNvbl92YWwgLT4gcHJvcC4KCnR5cGUganNvbl90ZXN0IAkJICBqc29uIC0+IHByb3AuCgoKJSBlc2NhcGUgIiBpbiBzdHJpbmcKdHlwZSBlc2NhcGUgc3RyaW5nIC0+IHN0cmluZyAtPiBwcm9wLgo=" }; { name = "core/lists.mod"; text = "JSAyOSBqdWx5IDIwMTQuCiUgMjEgamFuIDIwMTg6IGRpc3RpbmN0IGFkZGVkCgptb2R1bGUgbGlzdHMuCgp0eXBlIHJldiBsaXN0IEEgLT4gbGlzdCBBIC0+IGxpc3QgQSAtPiBwcm9wLgoKbWVtYmVyIFggW1h8X10uCm1lbWJlciBYIFtZfFJdIDotIG1lbWJlciBYIFIuCgphcHBlbmQgW10gSyBLLgphcHBlbmQgKFg6OkwpIEsgKFg6Ok0pIDotIGFwcGVuZCBMIEsgTS4KCmZvcmVhY2ggUCBbXS4KZm9yZWFjaCBQIChYOjpMKSA6LSBQIFgsIGZvcmVhY2ggUCBMLgoKZm9yc29tZSBQIChYOjpMKSA6LSBQIFg7IGZvcnNvbWUgUCBMLgoKbWVtYl9hbmRfcmVzdCBYIChYOjpMKSBMLgptZW1iX2FuZF9yZXN0IFggKFk6OkspIChZOjpMKSA6LSBtZW1iX2FuZF9yZXN0IFggSyBMLgoKcmV2ZXJzZSBMIEsgOi0gcmV2IEwgW10gSy4KcmV2IFtdIEwgTC4KcmV2IChYOjpMKSBLIE0gOi0gcmV2IEwgKFg6OkspIE0uCgpmb2xkbCBQIFtdIFggWC4KZm9sZGwgUCAoWjo6TCkgWCBZIDotIFAgWiBYIFcsIGZvbGRsIFAgTCBXIFkuCgpsZW5ndGggW10gMC4KbGVuZ3RoIChYOjpRKSBOIDotIGxlbmd0aCBRIE4nLCBOIGlzIE4nICsgMS4KCmRpc3RpbmN0IFtdLgpkaXN0aW5jdCBbWHxMXSA6LSBub3QobWVtYmVyIFggTCksIGRpc3RpbmN0IEwuCgptYXBwcmVkIFAgW10gW10uCm1hcHByZWQgUCAoWDo6TCkgKFk6OkspIDotIFAgWCBZLCBtYXBwcmVkIFAgTCBLLgo=" }; { name = "core/lists.mod~"; text = "JSAyOSBqdWx5IDIwMTQuCiUgMjEgamFuIDIwMTg6IGRpc3RpbmN0IGFkZGVkCgptb2R1bGUgbGlzdHMuCgp0eXBlIHJldiBsaXN0IEEgLT4gbGlzdCBBIC0+IGxpc3QgQSAtPiBvLgoKbWVtYmVyIFggW1h8X10uCm1lbWJlciBYIFtZfFJdIDotIG1lbWJlciBYIFIuCgphcHBlbmQgW10gSyBLLgphcHBlbmQgKFg6OkwpIEsgKFg6Ok0pIDotIGFwcGVuZCBMIEsgTS4KCmZvcmVhY2ggUCBbXS4KZm9yZWFjaCBQIChYOjpMKSA6LSBQIFgsIGZvcmVhY2ggUCBMLgoKZm9yc29tZSBQIChYOjpMKSA6LSBQIFg7IGZvcnNvbWUgUCBMLgoKbWVtYl9hbmRfcmVzdCBYIChYOjpMKSBMLgptZW1iX2FuZF9yZXN0IFggKFk6OkspIChZOjpMKSA6LSBtZW1iX2FuZF9yZXN0IFggSyBMLgoKcmV2ZXJzZSBMIEsgOi0gcmV2IEwgW10gSy4KcmV2IFtdIEwgTC4KcmV2IChYOjpMKSBLIE0gOi0gcmV2IEwgKFg6OkspIE0uCgpmb2xkbCBQIFtdIFggWC4KZm9sZGwgUCAoWjo6TCkgWCBZIDotIFAgWiBYIFcsIGZvbGRsIFAgTCBXIFkuCgpsZW5ndGggW10gMC4KbGVuZ3RoIChYOjpRKSBOIDotIGxlbmd0aCBRIE4nLCBOIGlzIE4nICsgMS4KCmRpc3RpbmN0IFtdLgpkaXN0aW5jdCBbWHxMXSA6LSBub3QobWVtYmVyIFggTCksIGRpc3RpbmN0IEwuCgptYXBwcmVkIFAgW10gW10uCm1hcHByZWQgUCAoWDo6TCkgKFk6OkspIDotIFAgWCBZLCBtYXBwcmVkIFAgTCBLLgo=" }; { name = "core/lists.sig"; text = "JSAyOSBqdWx5IDIwMTQuCnNpZyBsaXN0cy4KCnR5cGUgYXBwZW5kICAgICAgICAgICAgICAgICAgICAJbGlzdCBBIC0+IGxpc3QgQSAtPiBsaXN0IEEgLT4gcHJvcC4KdHlwZSBmb2xkbCAgICAgICAgICAgICAgICAgICAgICAoQSAtPiBCIC0+IEIgLT4gcHJvcCkgLT4gbGlzdCBBIC0+IEIgLT4gQiAtPiBwcm9wLgp0eXBlIGZvcmVhY2gJCQkoQSAtPiBwcm9wKSAtPiBsaXN0IEEgLT4gcHJvcC4KdHlwZSBmb3Jzb21lCQkJKEEgLT4gcHJvcCkgLT4gbGlzdCBBIC0+IHByb3AuCnR5cGUgbGVuZ3RoICAgICAgICAgICAgICAgICAgICAgbGlzdCBBIC0+IGludCAtPiBwcm9wLgp0eXBlIG1lbWJfYW5kX3Jlc3QgICAgICAgICAgICAgIEEgLT4gbGlzdCBBIC0+IGxpc3QgQSAtPiBwcm9wLgp0eXBlIG1lbWJlciAgICAgICAgICAgICAgICAgICAgIEEgLT4gbGlzdCBBIC0+IHByb3AuCnR5cGUgcmV2ZXJzZSAgICAgICAgICAgICAgICAgICAgbGlzdCBBIC0+IGxpc3QgQSAtPiBwcm9wLgp0eXBlIGRpc3RpbmN0ICAgICAgICAgICAgICAgICAgIGxpc3QgQSAtPiBwcm9wLgp0eXBlIG1hcHByZWQgICAgICAgICAgICAgICAgICAgIChBIC0+IEIgLT4gcHJvcCkgLT4gbGlzdCBBIC0+IGxpc3QgQiAtPiBwcm9wLgoKCg==" }; { name = "core/misc-eval.mod"; text = "bW9kdWxlIG1pc2MtZXZhbC4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlJSAgICBSZXdyaXRpbmctaW4tY29udGV4dCBzcGVjaWZpY2F0aW9uIG9mIGV2YWx1YXRpb24KJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQoKbm9uX3ZhbCAoXyBhcm9iYXNlIF8pICYgbm9uX3ZhbCAoZml4cHQgXykgJiBub25fdmFsIChjb25kIF8gXyBfKS4Kbm9uX3ZhbCBNIDotIHNwZWNpYWwgXyBNLgoKcmVkZXggRiAgICAgICA6LSBzcGVjaWFsIF8gRi4KcmVkZXggKFUgYXJvYmFzZSBWKSA6LSB2YWwgVSwgdmFsIFYuCnJlZGV4IChjb25kIHR0IF8gXykgJiByZWRleCAoY29uZCBmZiBfIF8pICYgcmVkZXggKGZpeHB0IF8pLgoKcmVkdWNlICgobGFtIFIpIGFyb2Jhc2UgTikgKFIgTikuCnJlZHVjZSAoZml4cHQgUikgKFIgKGZpeHB0IFIpKS4KcmVkdWNlIChjb25kIHR0IEwgUikgTC4KcmVkdWNlIChjb25kIGZmIEwgUikgUi4KcmVkdWNlIEYgKHNwZWMgQyBGIFtdKSA6LSBzcGVjaWFsIEMgRi4KcmVkdWNlICgoc3BlYyAxIEZ1biBBcmdzKSBhcm9iYXNlIE4pIFYgOi0gZXZhbF9zcGVjIEZ1biAoTjo6QXJncykgVi4KcmVkdWNlICgoc3BlYyBDIEZ1biBBcmdzKSBhcm9iYXNlIE4pIChzcGVjIEQgRnVuIChOOjpBcmdzKSkgOi0gIEMgPiAxLCBEIGlzIEMgLSAxLgoKY29udGV4dCBSICh4XCB4KSBSIDotIHJlZGV4IFIuCmNvbnRleHQgKGNvbmQgTSBOIFApICh4XCBjb25kIChFIHgpIE4gUCkgUiA6LSBub25fdmFsIE0sIGNvbnRleHQgTSBFIFIuCmNvbnRleHQgKE0gYXJvYmFzZSBOKSAgICAoeFwgKEUgeCkgYXJvYmFzZSBOKSAgICBSIDotIG5vbl92YWwgTSwgY29udGV4dCBNIEUgUi4KY29udGV4dCAoViBhcm9iYXNlIE0pICAgICh4XCBWIGFyb2Jhc2UgKEUgeCkpICAgIFIgOi0gdmFsIFYsIG5vbl92YWwgTSwgY29udGV4dCBNIEUgUi4KCmV2YWxjIFYgViA6LSB2YWwgVi4KZXZhbGMgTSBWIDotIGNvbnRleHQgTSBFIFIsIHJlZHVjZSBSIE4sIGV2YWxjIChFIE4pIFYuCgoKJSBGaXNjaGVyIHRyYW5zbGF0aW9uLCBmaXJzdCBwYXNzCgpmdHJhbnMgKGxhbSBWKSAobGFtIGtcIGsgYXJvYmFzZSBVKSA6LSBwaGkgKGxhbSBWKSBVLgpmdHJhbnMgKE0gYXJvYmFzZSBOKSAobGFtIGtcIFAgYXJvYmFzZSAobGFtIG1cIFEgYXJvYmFzZSAobGFtIG5cIG0gYXJvYmFzZSBrIGFyb2Jhc2UgbikpKSA6LQogICAgZnRyYW5zIE0gUCwgZnRyYW5zIE4gUS4KCnBoaSAobGFtIE0pIChsYW0ga1wgbGFtIHhcIChQIHgpIGFyb2Jhc2UgaykgOi0KICAgIHBpIHhcIHBpIHlcIGZ0cmFucyB4IChsYW0ga1wgayBhcm9iYXNlIHkpID0+IGZ0cmFucyAoTSB4KSAoUCB5KS4KCiUgRmlzY2hlciB0cmFuc2xhdGlvbiwgc2Vjb25kIHBhc3MKCmZ0cmFucycgKGxhbSBWKSAoYWRtIGtcIGsgYXJvYmFzZSBVKSA6LSBwaGknIChsYW0gVikgVS4KZnRyYW5zJyAoTSBhcm9iYXNlIE4pIChhZG0ga1wgUCBhcm9iYXNlIChhZG0gbVwgUSBhcm9iYXNlIChhZG0gblwgbSBhcm9iYXNlIGsgYXJvYmFzZSBuKSkpIDotCiAgICBmdHJhbnMnIE0gUCwgZnRyYW5zJyBOIFEuCgpwaGknIChsYW0gTSkgKGFkbSBrXCBsYW0geFwgKFAgeCkgYXJvYmFzZSBrKSA6LQogICAgcGkgeFwgcGkgeVwgZnRyYW5zJyB4IChhZG0ga1wgayBhcm9iYXNlIHkpID0+IGZ0cmFucycgKE0geCkgKFAgeSkuCgphZG1yZWQgKChhZG0gUikgYXJvYmFzZSBOKSAoUiBOKSAgJiAgYWRtcmVkIChhZG0gKHhcIE0gYXJvYmFzZSB4KSkgTS4KCnJlZDEgTSBOIDotIGFkbXJlZCBNIE4uCnJlZDEgKE0gYXJvYmFzZSBOKSAoTScgYXJvYmFzZSBOKSAmIHJlZDEgKE4gYXJvYmFzZSBNKSAoTiBhcm9iYXNlIE0nKSA6LSByZWQxIE0gTScuCnJlZDEgKGFkbSBSKSAoYWRtIFMpICAmIHJlZDEgKGxhbSBSKSAobGFtIFMpICA6LSBwaSB4XCByZWQxIChSIHgpIChTIHgpLgoKcmVkIE0gTiA6LSByZWQxIE0gUCwgISwgcmVkIFAgTi4KcmVkIE0gTS4KCgoKCnRlc3RjIDEgViA6LSBwcm9nICJmaWIiIEZpYiwgZXZhbGMgKEZpYiBhcm9iYXNlIChpIDgpKSBWLgp0ZXN0YyAyIFYgOi0gcHJvZyAiZmliIiBGaWIsIHByb2cgIm1hcCIgTWFwLCAKICAgICAgICAgICAgIGV2YWxjIChNYXAgYXJvYmFzZSBGaWIgYXJvYmFzZSAoY29ucyBhcm9iYXNlIChpIDMpIGFyb2Jhc2UgKGNvbnMgYXJvYmFzZSAoaSA0KSBhcm9iYXNlIG51bGwpKSkgVi4KdGVzdGMgMyBWIDotIHByb2cgImFwcG5kIiBBcHAsIGV2YWxjIChBcHAgYXJvYmFzZSAoY29ucyBhcm9iYXNlIChpIDEpIGFyb2Jhc2UgKGNvbnMgYXJvYmFzZSAoaSA1KSBhcm9iYXNlIG51bGwpKSBhcm9iYXNlIChjb25zIGFyb2Jhc2UgKGkgMikgYXJvYmFzZSBudWxsKSkgVi4KCm1peGV2YWwgKGxhbSBSKSAobGFtIFMpIDotIHBpIGtcIHZhbCBrID0+IGV2YWwgKFIgaykgKFMgaykuCgolJSUlICBPbGQgY29kZSBzYXZlZCBoZXJlIGZvciBhIGJpdC4KCiV0eXBlIG1hdGNobCAgICAgdG0gLT4gdG0gLT4gKHRtIC0+IHRtIC0+IHRtKSAtPiB0bS4KJXR5cGUgbWF0Y2h0ICAgICB0bSAtPiAodG0gLT4gdG0gLT4gdG0pIC0+ICgodG0gLT4gdG0pIC0+IHRtKSAtPiAodG0gLT4gdG0pIC0+IHRtLgoKJSBwcm9nICJzaXplIiAoZml4cHQgc2l6ZVwgbGFtIHRlcm1cIAolICAgbWF0Y2h0IHRlcm0gKHhceVwgICAgIHN1bSBhcm9iYXNlIChpIDEpIGFyb2Jhc2UgKHN1bSBhcm9iYXNlIChzaXplIGFyb2Jhc2UgeCkgYXJvYmFzZSAoc2l6ZSBhcm9iYXNlIHkpKSkKJSAgICAgICAgICAgICAgIChyXCBuYSB5XCBzdW0gYXJvYmFzZSAoaSAxKSBhcm9iYXNlIChzaXplIGFyb2Jhc2UgKHIgeSkpKQolICAgICAgICAgICAgICAgKHhcICAgICAgIChpIDEpKSkuCgolIHByb2cgIm1hcHRtMCIgKGZpeHB0IG1hcHRtXCBsYW0gZmFwcFwgbGFtIGZhYnNcIGxhbSBmdmFyXCBsYW0gdGVybVwKJSAgIG1hdGNodCB0ZXJtICh4XHlcIGZhcHAgYXJvYmFzZSAobWFwdG0gYXJvYmFzZSBmYXBwIGFyb2Jhc2UgZmFicyBhcm9iYXNlIGZ2YXIgYXJvYmFzZSB4KSBhcm9iYXNlIChtYXB0bSBhcm9iYXNlIGZhcHAgYXJvYmFzZSBmYWJzIGFyb2Jhc2UgZnZhciBhcm9iYXNlIHkpKQolICAgICAgICAgICAgICAgKHJcICAgZmFicyBhcm9iYXNlIChsYW0geFwgbWFwdG0gYXJvYmFzZSBmYXBwIGFyb2Jhc2UgZmFicyBhcm9iYXNlIGZ2YXIgYXJvYmFzZSAociB4KSkpCiUgICAgICAgICAgICAgICAoeFwgICBmdmFyIGFyb2Jhc2UgeCkpLgoKJSBPYnNvbGV0ZSBjb25zdHJ1Y3RvcnMgbm93IHRoYXQgd2UgaGF2ZSB0aGUgbW9yZSBnZW5lcmFsCiUgbWF0Y2gtd2l0aC1ydWxleHh4eHMgY29uc3RydWN0aW9ucy4gIFJlbW92ZSBldmVudHVhbGx5LgoKJSBldmFsIChtYXRjaGwgRTAgRTEgRTIpIFYgOi0gZXZhbCBFMCBVLAolICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoVSA9IG51bGwsIGV2YWwgRTEgViA7CiUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBVID0gKGNucyBYIEwpLCBldmFsIChFMiBYIEwpIFYpLgolIGV2YWwgKG1hdGNodCBFMCBFMSBFMiBFMykgViA6LSBldmFsIEUwIFUsCiUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKFUgPSAoYXAgTSBOKSwgZXZhbCAoRTEgTSBOKSBWIDsKJSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgVSA9IChhYiBSKSwgICBldmFsIChFMiBSKSAgIFYgOwolICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub20gVSwgICAgICAgIGV2YWwgKEUzIFUpICAgVikuCgoKJSBPYnNvbGV0ZSBjb25zdHJ1Y3RvcnMgbm93IHRoYXQgd2UgaGF2ZSB0aGUgbW9yZSBnZW5lcmFsCiUgbWF0Y2gtd2l0aC1ydWxleHh4eHMgY29uc3RydWN0aW9ucy4gIFJlbW92ZSBldmVudHVhbGx5LgoKJSB0eXBlb2YgKG1hdGNobCBFMCBFMSBFMikgQSA6LSB0eXBlb2YgRTAgKGxzdCBCKSwgdHlwZW9mIEUxIEEsIAolICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpIHhcIHBpIHlcIHR5cGVvZiB4IEIgPT4gIHR5cGVvZiB5IChsc3QgQikgPT4gdHlwZW9mIChFMiB4IHkpIEEuCgolIHR5cGVvZiAobWF0Y2h0IEUwIEUxIEUyIEUzKSBBIDotIHR5cGVvZiBFMCB1dG0sCiUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBpIHhcICBwaSB5XCB0eXBlb2YgeCB1dG0gPT4gdHlwZW9mIHkgICAgIHV0bSAgPT4gdHlwZW9mIChFMSB4IHkpIEEpLAolICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChwaSByXCAocGkgWVwgdHlwZW9mIFkgdXRtID0+IHR5cGVvZiAociBZKSB1dG0pID0+IHR5cGVvZiAoRTIgcikgQSksCiUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHBpIHhcICAgICAgICB0eXBlb2YgeCB1dG0gICAgICAgICAgICAgICAgICAgICAgPT4gdHlwZW9mIChFMyB4KSBBKS4KCiUlIFRoZSBtYXRjaCcgd2FzIGludGVuZGVkIHRvIG1hdGNoIG9uIGFuIGFic3RyYWN0ZWQgdGVybSAodG0gLT4gdG0pCiUlIGluc3RlYWQgb2YganVzdCB0bS4gIEZvciBub3csIEkgbGVhdmUgdGhpcyBvdXQgc2luY2UgaXQgY2FuIHRoZQolJSBlZmZlY3QgaXMgZWFzaWx5IGFjaGlldmVkIHdpdGhvdXQgaXQuCgoldHlwZSBtYXRjaCcgICAgICAgICh0bSAtPiB0bSkgLT4gbGlzdCBydWxleHh4eCAtPiB0bS4KJXR5cGUgbWF0Y2hpbmcnICAgICAodG0gLT4gdG0pIC0+IGxpc3QgcnVsZXh4eHggLT4gdG0gLT4gby4KJXR5cGUgYXBwbHltYXRjaCcgICBsaXN0IHRtIC0+ICh0bSAtPiB0bSkgLT4gcnVsZXh4eHggLT4gdG0gLT4gby4KJXR5cGUgPT09PiAgICAgICAgICAodG0gLT4gdG0pIC0+IHRtIC0+IHJ1bGV4eHh4LgolaW5maXhyICA9PT0+IDUuCgolIGV2YWwgKG1hdGNoJyBFeHAgUnVsZXMpIFYgOi0gZXZhbCAoYWJ0IEV4cCkgKGFiIFUpLCBtYXRjaGluZycgVSBSdWxlcyBWLgolIG1hdGNoaW5nJyBWYWwgKFI6OlJzKSBWIDotIGFwcGx5bWF0Y2gnIFtdIFZhbCBSIFY7IG1hdGNoaW5nJyBWYWwgUnMgVi4KCiUgYXBwbHltYXRjaCcgTnMgRXhwIChhbGwgIFIpIFYgOi0gc2lnbWEgWFwgYXBwbHltYXRjaCcgTnMgRXhwIChSIFgpIFYuCiUgYXBwbHltYXRjaCcgTnMgRXhwIChhbGwnIFIpIFYgOi0gc2lnbWEgWFwgYXBwbHltYXRjaCcgTnMgRXhwIChSIFgpIFYuCiUgYXBwbHltYXRjaCcgTnMgRXhwIChuYWIgIFIpIFYgOi0gcGkgeFwgY29weSBOIHggPT4gZXZhbCB4IE4gPT4gYXBwbHltYXRjaCcgW058TnNdIEV4cCAoUiB4KSBWLgolIGFwcGx5bWF0Y2gnIE5zIEV4cCAoRXhwJyA9PT0+IFJlc3VsdCkgViA6LSAocGkgeFwgY29weSB4IHggPT4gY29weSAoRXhwIHgpIChFeHAnIHgpKSwgZm9yZWFjaCBub20gTnMsIGV2YWwgUmVzdWx0IFYuCgo=" }; { name = "core/misc-eval.sig"; text = "c2lnIG1pc2MtZXZhbC4KCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKJSUlIEV2YWx1YXRpb24gYnkgcmV3cml0aW5nCiUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUKdHlwZSBub25fdmFsICAgICAgIHRtIC0+IHByb3AuCnR5cGUgcmVkZXggICAgICAgICB0bSAtPiBwcm9wLgp0eXBlIHJlZHVjZSAgICAgICAgdG0gLT4gdG0gLT4gcHJvcC4KdHlwZSBjb250ZXh0ICAgICAgIHRtIC0+ICh0bSAtPiB0bSkgLT4gdG0gLT4gcHJvcC4KdHlwZSBldmFsYyAgICAgICAgIHRtIC0+IHRtIC0+IHByb3AuCgp0eXBlIHRlc3RjICAgICAgICBpbnQgLT4gdG0gLT4gcHJvcC4KdHlwZSBtaXhldmFsICAgICAgIHRtIC0+IHRtIC0+IHByb3AuCgoKCnR5cGUgZnRyYW5zLCBwaGkgICAgICAgdG0gLT4gdG0gLT4gcHJvcC4KCnR5cGUgYWRtICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHRtIC0+IHRtKSAtPiB0bS4KdHlwZSBwaGknLCBmdHJhbnMnLCBhZG1yZWQsIHJlZDEsIHJlZCAgIHRtIC0+IHRtIC0+IHByb3AuCg==" }; { name = "core/progs.mod"; text = "" }; { name = "core/progs.sig"; text = "c2lnIHByb2dzLgoKYWNjdW1fc2lnIHNweSwgY29udHJvbCwgbGlzdHMuCmFjY3VtX3NpZyBldmFsLgphY2N1bV9zaWcgdHlwaW5nLgoKdHlwZSBwcm9nICAgICBzdHJpbmcgLT4gdG0gLT4gcHJvcC4KdHlwZSB0ZXN0ICAgICBpbnQgLT4gdG0gLT4gcHJvcC4KdHlwZSB0ZXN0YWxsICBwcm9wLgo=" }; { name = "core/progs_gen.mod"; text = "bW9kdWxlIHByb2dzX2dlbi4KJXByb2cgInRlc3RfMSIgKHN1bSBhcm9iYXNlICgoaSAzKSkgYXJvYmFzZSAoKGkgMzkpKSkuCgo=" }; { name = "core/progs_gen.mod~"; text = "cHJvZyAidGVzdF8xIiAoc3VtIGFyb2Jhc2UgKChpIDMpKSBhcm9iYXNlICgoaSAzOSkpKS4KCg==" }; { name = "core/progs_gen.sig"; text = "c2lnIHByb2dzX2dlbi4KCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgphY2N1bV9zaWcgZXZhbC4KYWNjdW1fc2lnIHR5cGluZy4KJWFjY3VtX3NpZyBkYXRhdHlwZXMuCgp0eXBlIHByb2cgICAgIHN0cmluZyAtPiB0bSAtPiBwcm9wLgo=" }; { name = "core/run.mod"; text = "bW9kdWxlIHJ1bi4KJSBUaGlzIGlzIHRoZSBoYXJuZXNzIGZvciB0ZXN0aW5nIGFuZCBleGFtcGxlcy4KCmFjY3VtdWxhdGUgc3B5LCBjb250cm9sLCBsaXN0cy4KYWNjdW11bGF0ZSBldmFsLgphY2N1bXVsYXRlIHR5cGluZy4KYWNjdW11bGF0ZSB1dGlscy4KYWNjdW11bGF0ZSBwcm9nc19nZW4uCmFjY3VtdWxhdGUganNvbi4KCgpydW5fdGVzdHMgSjQgOi0gcHJvZyBOYW1lIFByb2csCiAgICAgICAJICAgIFNpemUgaXMgc2l6ZSBOYW1lLAoJICAgIGlmIChTaXplID4gNCkgKAogICAgICAgCSAgICBEZWIgaXMgc3Vic3RyaW5nIE5hbWUgMCA0LAoJICAgIGlmIChEZWIgPSAidGVzdCIpICgKICAgICAgIAkgICAgZXZhbCBQcm9nIFYsCiAgICAgICAgICAgIHRlcm1fdG9fc3RyaW5nIFByb2cgU1Byb2csCiAgICAgICAgICAgIHRlcm1fdG9fc3RyaW5nIFYgU1YsCgkgICAganNvbl9uZXcgSiwKCSAgICBqc29uX2FkZF9zdHJpbmcgInZhbHVlIiBTViBKIEoyLAoJICAgIGpzb25fYWRkX3N0cmluZyAicHJvZyIgU1Byb2cgSjIgSjMsCgkgICAganNvbl9hZGRfc3RyaW5nICJuYW1lIiBOYW1lIEozIEo0CgkgICAgKSAoZmFpbCkKCSAgICApIChmYWlsKQoJICAgIC4KCgpydW5fYWxsIEpzb24gOi0KCWpzb25fbmV3IEosCglhbGxpIChydW5fdGVzdHMpIExpc3QsCglqc29uX2FycmF5X2Zyb21fanNvbl9saXN0IExpc3QgSmFycmF5LAoJanNvbl9hZGRfdmFsICJvdXRwdXQiIEphcnJheSBKIEonLAoJc3RyaW5nX29mX2pzb24gSicgSnNvbi4KCQo=" }; { name = "core/run.mod~"; text = "bW9kdWxlIHJ1bi4KJSBUaGlzIGlzIHRoZSBoYXJuZXNzIGZvciB0ZXN0aW5nIGFuZCBleGFtcGxlcy4KCmFjY3VtdWxhdGUgc3B5LCBjb250cm9sLCBsaXN0cy4KYWNjdW11bGF0ZSBldmFsLgphY2N1bXVsYXRlIHR5cGluZy4KJWFjY3VtdWxhdGUgZGF0YXR5cGVzLgphY2N1bXVsYXRlIHByb2dzX2dlbi4KCgoldGVzdGFsbCA6LSAodGVzdCBOIFYsIHRlcm1fdG9fc3RyaW5nIE4gU3RyLCBwcmludCAiVmFsdWUgZm9yICIsIHByaW50IFN0ciwgcHJpbnQgIjogIiwKJSAgICAgICAgICAgICAgICAgICAgICB0ZXJtX3RvX3N0cmluZyBWIFZzdHIsIHByaW50IFZzdHIsIHByaW50ICJcbiIsIGZhaWwpOwolICAgICAgICAgICAocHJvZyBOYW1lIFByb2csIHByaW50ICJUeXBlIG9mICIsIHByaW50IE5hbWUsIHByaW50ICIgaXM6ICIsIHR5cGVvZiBQcm9nIFR5cGUsCiUJICAgICAgICAgICAgICAgICAgICB0ZXJtX3RvX3N0cmluZyBUeXBlIFRzY3IsIHByaW50IFRzY3IsIHByaW50ICJcbiIsIGZhaWwpLgoldGVzdGFsbC4KCmFsbCBQIEwgOi0KICAgIGFsbF9hdXggUCBbXSBMLgoKYWxsX2F1eCBQIEFjYyBMIDotCiAgICAoUCBOLCBub3QgKG1lbWJlciBOIEFjYyksICEpLAogICAgYWxsX2F1eCBQIChOOjpBY2MpIEwuCgphbGxfYXV4IF8gTCBMLgoKcnVuIEFuc3dlciBTIDotcHJvZyBOYW1lIFByb2csIGV2YWwgUHJvZyBWLAoJICAgIHRlcm1fdG9fc3RyaW5nIE5hbWUgU3RyLAogICAgICAgICAgICB0ZXJtX3RvX3N0cmluZyBWIFMuCgoKCnJ1bl9hbGwgTCA6LSBhbGwgKHJ1bikgTCwgCnJ1bl9hbGwgTC4K" }; { name = "core/run.sig"; text = "c2lnIHJ1bi4KCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgphY2N1bV9zaWcgZXZhbC4KYWNjdW1fc2lnIHR5cGluZy4KYWNjdW1fc2lnIHByb2dzX2dlbi4KYWNjdW1fc2lnIGpzb24uCgp0eXBlIHJ1bl90ZXN0cyBqc29uIC0+IHByb3AuCnR5cGUgcnVuX2FsbCAgc3RyaW5nIC0+IHByb3AuCg==" }; { name = "core/run.sig~"; text = "c2lnIHJ1bi4KCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgphY2N1bV9zaWcgZXZhbC4KYWNjdW1fc2lnIHR5cGluZy4KYWNjdW1fc2lnIHByb2dzX2dlbi4KCnR5cGUgYWxsIChBIC0+IHByb3ApIC0+IGxpc3QgQSAtPiBwcm9wLgp0eXBlIHJ1biBzdHJpbmcgLT4gcHJvcC4KdHlwZSBydW5fYWxsICBsaXN0IHN0cmluZyAtPiBwcm9wLgo=" }; { name = "core/spy.mod"; text = "bW9kdWxlIHNweS4KCmJyYWNrZXQgUHJlIEcgUG9zdCA6LSBwcmludCBQcmUsIHRlcm1fdG9fc3RyaW5nIEcgUywgcHJpbnQgUywgcHJpbnQgUG9zdC4KYW5ub3VuY2UgRyA6LSBicmFja2V0ICI+PiIgRyAiXG4iLCBmYWlsLgpzcHkgRyA6LSAoYnJhY2tldCAiPkVudGVyaW5nICIgRyAiXG4iLCBHLCBicmFja2V0ICI+U3VjY2VzcyAgIiBHICJcbiI7CiAgICAgICAgICBicmFja2V0ICI+TGVhdmluZyAgIiBHICJcbiIsIGZhaWwpLgo=" }; { name = "core/spy.sig"; text = "c2lnIHNweS4KCnR5cGUgYW5ub3VuY2UsIHNweSAgICBwcm9wIC0+IHByb3AuCnR5cGUgYnJhY2tldCAgICAgICAgICBzdHJpbmcgLT4gcHJvcCAtPiBzdHJpbmcgLT4gcHJvcC4gICUgQXV4aWxpYXJ5Cg==" }; { name = "core/typing.mod"; text = "bW9kdWxlIHR5cGluZy4KCiUgdHlwZW9mICBBIEIgOi0gYW5ub3VuY2UgKHR5cGVvZiBBIEIpLgolIHR5cGVtYXRjaCAgQSBCIEMgOi0gYW5ub3VuY2UgKHR5cGVtYXRjaCBBIEIgQykuCiUgdHlwZW1hdGNocnVsZXh4eHggIEEgQiBDIDotIGFubm91bmNlICh0eXBlbWF0Y2hydWxleHh4eCBBIEIgQykuCgp0eXBlb2YgKE0gYXJvYmFzZSBOKSBBICAgICAgICAgIDotIHR5cGVvZiBNIChhcnIgQiBBKSwgdHlwZW9mIE4gQi4KdHlwZW9mIChjb25kIFAgUSBSKSBBICAgICA6LSB0eXBlb2YgUCBib29sLCB0eXBlb2YgUSBBLCB0eXBlb2YgUiBBLgp0eXBlb2YgKGxhbSBNKSAoYXJyIEEgQikgIDotIHBpIHhcIHR5cGVvZiB4IEEgPT4gdHlwZW9mIChNIHgpIEIuCnR5cGVvZiAoZml4cHQgTSkgQSAgICAgICAgOi0gcGkgeFwgdHlwZW9mIHggQSA9PiB0eXBlb2YgKE0geCkgQS4KdHlwZW9mIChsZXQgTSBSKSBBICAgICAgICA6LSB0eXBlb2YgTSBCLCBwaSB4XCB0eXBlb2YgeCBCID0+IHR5cGVvZiAoUiB4KSBBLgoKdHlwZW9mIChjbnMgWCBZKSAobHN0IEEpICAgIDotIHR5cGVvZiBYIEEsIHR5cGVvZiBZIChsc3QgQSkuCnR5cGVvZiAocHIgWCBZKSAgKHBydHkgQSBCKSA6LSB0eXBlb2YgWCBBLCB0eXBlb2YgWSBCLgoKdHlwZW9mIHR0IGJvb2wgJiB0eXBlb2YgYW5kIChhcnIgYm9vbCAoYXJyIGJvb2wgYm9vbCkpLgp0eXBlb2YgZmYgYm9vbCAmIHR5cGVvZiBvciAgKGFyciBib29sIChhcnIgYm9vbCBib29sKSkuCnR5cGVvZiBlcXVhbCAoYXJyIEEgKGFyciBBIGJvb2wpKS4KCnR5cGVvZiBudWxsICAobHN0IEEpICAgICAgICAgICAgICYgdHlwZW9mIGNvbnMgIChhcnIgQSAoYXJyIChsc3QgQSkgKGxzdCBBKSkpLgp0eXBlb2YgY2FyICAgKGFyciAobHN0IEEpIEEpICAgICAmIHR5cGVvZiBjZHIgICAoYXJyIChsc3QgQSkgKGxzdCBBKSkuCnR5cGVvZiBjb25zcCAoYXJyIChsc3QgQSkgYm9vbCkgICYgdHlwZW9mIG51bGxwIChhcnIgKGxzdCBBKSBib29sKS4KdHlwZW9mIHBhaXIgIChhcnIgQSAoYXJyIEIgKHBydHkgQSBCKSkpLgoKdHlwZW9mIChpIEkpIGludCAgICAgICAgICAgICAgICAgICAgICAgICYgdHlwZW9mIHplcm9wICAgKGFyciBpbnQgYm9vbCkuCnR5cGVvZiBncmVhdGVyIChhcnIgaW50IChhcnIgaW50IGJvb2wpKSAmIHR5cGVvZiBtaW51cyAgIChhcnIgaW50IChhcnIgaW50IGludCkpLgp0eXBlb2Ygc3VtICAgICAoYXJyIGludCAoYXJyIGludCBpbnQpKSAgJiB0eXBlb2YgdGltZXMgICAoYXJyIGludCAoYXJyIGludCBpbnQpKS4KCnR5cGVvZiBhcHAgICAgIChhcnIgdXRtIChhcnIgdXRtIHV0bSkpLgoKJSUlJSBOZXcgZmVhdHVyZXMgdG8gTUxUUwoKJSBCZWxvdywgdHlwaW5nIG9mIG5ldyBhbmQgbmFiIGFsbG93cyBmb3IgaW50cm9kdWNpbmcgYSBuZXcgbm9taW5hbCBvZiBhbnkgdHlwZS4KdHlwZW9mIChuZXcgUikgQSAgICAgOi0gcGkgeFwgdHlwZW9mIHggQiAgID0+IHR5cGVvZiAoUiB4KSBBLgp0eXBlb2YgKGFidCBSKSB1dG0gICA6LSBwaSB4XCB0eXBlb2YgeCB1dG0gPT4gdHlwZW9mIChSIHgpIHV0bS4KdHlwZW9mIChhYiAgUikgdXRtICAgOi0gcGkgeFwgdHlwZW9mIHggdXRtID0+IHR5cGVvZiAoUiB4KSB1dG0uCnR5cGVvZiAoYXAgTSBOKSB1dG0gIDotIHR5cGVvZiBNIHV0bSwgdHlwZW9mIE4gdXRtLgoKdHlwZW9mIChtYXRjaCBFeHAgUnVsZXMpIEIgOi0gdHlwZW9mIEV4cCBBLCB0eXBlbWF0Y2ggQSBSdWxlcyBCLgoKdHlwZW1hdGNoIEEgKFI6OlJzKSBCIDotIHR5cGVtYXRjaHJ1bGV4eHh4IEEgUiBCLCB0eXBlbWF0Y2ggQSBScyBCLgp0eXBlbWF0Y2ggQSBbXSAgICAgIEIuCgp0eXBlbWF0Y2hydWxleHh4eCBBIChFeHAgPT0+IFJlc3VsdCkgQiA6LSB0eXBlb2YgRXhwIEEsIHR5cGVvZiBSZXN1bHQgQi4KdHlwZW1hdGNocnVsZXh4eHggQSAobmFiICAgUikgQiA6LSBwaSB4XCB0eXBlb2YgeCBDICAgICAgICAgICAgICAgICAgICAgICAgICAgPT4gdHlwZW1hdGNocnVsZXh4eHggQSAoUiB4KSBCLgp0eXBlbWF0Y2hydWxleHh4eCBBIChhbGwgICBSKSBCIDotIHBpIHhcIHR5cGVvZiB4IEMgICAgICAgICAgICAgICAgICAgICAgICAgICA9PiB0eXBlbWF0Y2hydWxleHh4eCBBIChSIHgpIEIuCnR5cGVtYXRjaHJ1bGV4eHh4IEEgKGFsbCcgIFIpIEIgOi0gcGkgeFwgKHBpIHVcIHR5cGVvZiAoeCB1KSBDIDotIHR5cGVvZiB1IEQpID0+IHR5cGVtYXRjaHJ1bGV4eHh4IEEgKFIgeCkgQi4KdHlwZW1hdGNocnVsZXh4eHggQSAoYWxsJycgUikgQiA6LSBwaSB4XCAocGkgdVwgcGkgdlwgdHlwZW9mICh4IHUgdikgQyA6LSB0eXBlb2YgdSBELCB0eXBlb2YgdiBFKSA9PiB0eXBlbWF0Y2hydWxleHh4eCBBIChSIHgpIEIuCg==" }; { name = "core/typing.sig"; text = "c2lnIHR5cGluZy4KYWNjdW1fc2lnIHNweSwgY29udHJvbCwgbGlzdHMuCmFjY3VtX3NpZyBldmFsLgoKJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJQolJSUgVHlwaW5nIG9mIG1pbmlGUCBwcm9ncmFtcy4gKEZpZ3VyZSAxMC4zKQolJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlJSUlCmtpbmQgdHkgICAgICAgICAgICAgICAgdHlwZS4KdHlwZSBpbnQsIGJvb2wgICAgICAgICB0eS4KdHlwZSBsc3QgICAgICAgICAgICAgICB0eSAtPiB0eS4gICAgICAgICUgTGlzdHMKdHlwZSBwcnR5ICAgICAgICAgICAgICB0eSAtPiB0eSAtPiB0eS4gICUgUGFpcnMKdHlwZSBhcnIgICAgICAgICAgICAgICB0eSAtPiB0eSAtPiB0eS4gICUgRnVuY3Rpb25hbCBhcnJvdyB0eXBlCnR5cGUgdXRtICAgICAgICAgICAgICAgdHkuICAgICAgICAgICAgICAlIHVudHlwZWQgbGFtYmRhIHRlcm1zCgp0eXBlIHR5cGVvZiAgICAgICAgICAgIHRtIC0+IHR5IC0+IHByb3AuICAlIFRvcC1sZXZlbCBwcmVkaWNhdGUKCnR5cGUgdHlwZW1hdGNoICAgICAgICAgdHkgLT4gbGlzdCBydWxleHh4eHh4IC0+IHR5IC0+IHByb3AuCnR5cGUgdHlwZW1hdGNocnVsZXh4eHh4eCAgICAgdHkgLT4gcnVsZXh4eHh4eCAgICAgIC0+IHR5IC0+IHByb3AuCg==" }; { name = "core/uprogs.mod"; text = "" }; { name = "core/uprogs.sig"; text = "c2lnIHVwcm9ncy4KCmFjY3VtX3NpZyBzcHksIGNvbnRyb2wsIGxpc3RzLgphY2N1bV9zaWcgZXZhbC4KYWNjdW1fc2lnIHR5cGluZy4KCnR5cGUgcHJvZyAgICAgc3RyaW5nIC0+IHRtIC0+IHByb3AuCnR5cGUgdGVzdCAgICAgaW50IC0+IHRtIC0+IHByb3AuCnR5cGUgdGVzdGFsbCAgcHJvcC4KdHlwZSByZXBvcnQgICB0bSAtPiB0bSAtPiBwcm9wLgoKCiUlJSUgRGF0YSB0eXBlIGZvciBmaXJzdC1vcmRlciB0ZXJtcyBvdmVyIHRoZSBzaWduYXR1cmUge2EvMCwgYi8wLCBmLzEsIGcvMn0KCnR5cGUgYSwgYiwgaCwgZyAgICB0bS4KdHlwZSBoaCAgICAgICAgICAgIHRtIC0+IHRtLgp0eXBlIGdnICAgICAgICAgICAgdG0gLT4gdG0gLT4gdG0uCnR5cGUgZm9sdGVybSAgICAgICB0eS4KCnR5cGUgZHAgICAgICAgICAgICB0bSAtPiB0bSAtPiB0bS4KdHlwZSBkcGFpciAgICAgICAgIHRtLgp0eXBlIGRwdHkgICAgICAgICAgdHkuCgolJSUlIERhdGEgdHlwZSBmb3IgdW5pZmljYXRpb24gcHJvYmxlbXMgKHF1YW50aWZpZWQgb3Igbm90KQoKdHlwZSBxdW5pZiAgdHkuCnR5cGUgdW5pZiAgIHR5LgoKdHlwZSBjb2VyY2UgdG0uCnR5cGUgY29lICAgIHRtIC0+IHRtLgp0eXBlIHNvbWUgICAodG0gLT4gdG0pIC0+IHRtLgp0eXBlIHNvbSAgICAodG0gLT4gdG0pIC0+IHRtLgo=" }; { name = "core/utils.mod"; text = "bW9kdWxlIHV0aWxzLgoKZmlyc3QgUHJvcCA6LSBQcm9wLCAhLgoKdHlwZSBhbGxfYXV4IChBIC0+IHByb3ApIC0+IGxpc3QgQSAtPiBsaXN0IEEgLT4gcHJvcC4KCmFsbGkgUCBMIDotCiAgICBhbGxfYXV4IFAgW10gTC4KCmFsbF9hdXggUCBBY2MgTCA6LQogICAgKFAgTiwgbm90IChtZW1iZXIgTiBBY2MpLCAhKSwKICAgIGFsbF9hdXggUCAoTjo6QWNjKSBMLgoKYWxsX2F1eCBfIEwgTC4KCgpmb3IgMCBQIDotIFAgMC4KZm9yIEkgUCA6LSBQIEksIEkyIGlzIEkgLSAxLCBmb3IgSTIgUC4KCg==" }; { name = "core/utils.sig"; text = "c2lnIHV0aWxzLgphY2N1bV9zaWcgbGlzdHMuCgolIFV0aWxpdHkgdG8gb25seSBleHRyYWN0IGZpcnN0IHJlc3VsdCA6CnR5cGUgZmlyc3QgcHJvcCAtPiBwcm9wLgoKJSBtYWtlcyBhIGxpc3QgTCBvZiBhbGwgc29sdXRpb25zIG9mIGEgZ29hbCBHIG9mIG9uZSBvdXRwdXQgOgp0eXBlIGFsbGkgKEEgLT4gcHJvcCkgLT4gbGlzdCBBIC0+IHByb3AuCgp0eXBlIGZvciBpbnQgLT4gKGludCAtPiBwcm9wKSAtPiBwcm9wLgoKCiUgRk9SIEVMUEkKdHlwZSBpbnRfdG9fc3RyaW5nIGludCAtPiBzdHJpbmcuCnR5cGUgc2l6ZSBzdHJpbmcgLT4gaW50Lgp0eXBlIHN1YnN0cmluZyBzdHJpbmcgLT4gaW50IC0+IGludCAtPiBzdHJpbmcu" }]
 let load () = List.iter (fun f -> Sys_js.create_file f.name (B64.decode f.text)) files
