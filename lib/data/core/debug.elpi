
type debug prop.
type seen-by-eval tm -> prop.
type seen-by-eval_clause clause -> prop.
type seen-by-copy tm -> prop.
type seen-by-copy_clause clause -> prop.
type seen-by-matches tm -> pat -> prop.

eval V R :-
    debug,
    not (seen-by-eval V), !,
    print "eval" V,
    seen-by-eval V => eval V R.

eval_clause L Subst Cl R :-
    debug,
    not (seen-by-eval_clause Cl), !,
    print "eval_clause" L Subst Cl R,
    seen-by-eval_clause Cl => eval_clause L Subst Cl R.

copy T1 T2 :-
    debug,
    not (seen-by-copy T1), !,
    print "copy" T1 T2,
    (seen-by-copy T1 => copy T1 T2),
    print "copy out" T1 T2,
    true.

copy_clause Cl1 Cl2 :-
    debug,
    not (seen-by-copy_clause Cl1), !,
    print "copy_clause" Cl1 Cl2,
    seen-by-copy_clause Cl1 => copy_clause Cl1 Cl2.

matches Vout Pin TmSubst NomSubst :-
   debug,
   not (seen-by-matches Vout Pin), !,
   print "matches" Vout Pin TmSubst NomSubst,
   (seen-by-matches Vout Pin => matches Vout Pin TmSubst NomSubst),
   print "matches out" Vout Pin TmSubst NomSubst,
   true.

type seen-by-locate-rigid tm -> tm -> tm -> pat -> prop.
locate_rigid Xin Xout V P :-
   debug,
   not (seen-by-locate-rigid Xin Xout V P),
   print "locate_rigid" Xin V P,
   (seen-by-locate-rigid Xin Xout V P => locate_rigid Xin Xout V P).
