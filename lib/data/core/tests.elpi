accumulate typing.
accumulate debug.
accumulate deprime.
accumulate builtins.

test_app_id :-
    piv x \ eval (app (lam (X \ X)) x) x.

test_higher_arity :-
    eval (backslash (X \ X)) V,
    pin x \
    eval (arobase V x) x.

test_return_higher_arity :-
    Id = backslash (X \ X),
    eval (app (lam X \ X) Id) V,
    pin x \
    eval (arobase V x) x.

test_special :-
    is_int V1 2,
    is_int V2 3,
    eval (special add [V1, V2]) V3,
    is_int V3 5.

type zero constructor.
type succ constructor.

test_variant :-
    eval
      (variant succ [app (lam X \ X) (variant zero [])])
      (variant succ [variant zero []]).

test_matches_lit :-
    matches [] (lit (i 0)) (plit (i 0)).

test_matches_data :-
    matches []
      (variant succ [variant zero []])
      (pvariant succ [pvariant zero []]).

test_matches_nom :-
    pin xout \
    pin xin \
    sigma Subst \
    matches Subst xout (pnom xin),
    subst Subst xout xin.

test_match_lit :-
    eval
      (match (lit (i 0)) [arr (plit (i 0)) (lit (i 3))])
      (lit (i 3)).

test_match_easydata :-
    eval
      (match (variant zero []) [arr (pvariant zero []) (lit (i 0))])
      (lit (i 0)).

test_eval_clause :-
    eval_clause
      (lit (i 0))
      [] (arr (plit (i 0)) (lit (i 3)))
      (lit (i 3)).

test_match_data :-
    eval
      (match (variant succ [variant zero []])
       [arr (pvariant zero []) (lit (i 6)),
        arr (pvariant succ [pvariant succ [pvariant zero []]]) (lit (i 12)),
        arr (pvariant succ [pvariant zero []]) (lit (i 36))])
      (lit (i 36)).

test_match_all :-
    eval
      (match (lit (i 3))
        [(all x \ arr (pvar x) x)])
      (lit (i 3)).

test_match_nab :-
    eval
      (match (lit (i 3))
        [(nab x \ arr (pnom x) x),
         arr pany (lit (i 4))])
      (lit (i 4)).

test_match_nom :-
    eval
      (new x \ match x
        [(nab y \ arr (pnom y) (lit (i 3)))])
      (lit (i 3)).

type test_pair constructor.

test_match_pair :-
    eval
      (match (variant test_pair [(lit (i 0)), (lit (i 1))])
        [(all x \ all y \
          arr (pvariant test_pair [pvar x, pvar y]) (variant test_pair [y, x]))])
      (variant test_pair [lit (i 1), lit (i 0)]).

test_match_wrong_nab :-
    not (eval
      (backslash X \ (match (variant test_pair [X, X])
        [(nab x \ nab y \
         arr (pvariant test_pair [pnom x, pnom y]) (variant test_pair [y, x]))]))
      (backslash X \ variant test_pair [X, X])).

test_match_nom_distinct_ok :-
    eval
      (new x \ new y \ match (variant test_pair [x, y])
        [(nab x \ nab y \ arr (pvariant test_pair [pnom x, pnom y]) (lit (b btrue))),
         (arr pany (lit (b bfalse)))])
      (lit (b btrue)).

test_match_nom_distinct_no :-
    eval
      (new x \ match (variant test_pair [x, x])
        [(nab x \ nab y \ arr (pvariant test_pair [pnom x, pnom y]) (lit (b btrue))),
         (arr pany (lit (b bfalse)))])
      (lit (b bfalse)).

test_match_nom_distinct_another_no :-
    eval
      (new x \ new y \ match (variant test_pair [x, y])
        [(nab x \ arr (pvariant test_pair [pnom x, pnom x]) (lit (b btrue))),
         (arr pany (lit (b bfalse)))])
      (lit (b bfalse)).

test_select :-
    is_int T1 1,
    is_int T2 3,
    is_int T3 5,
    is_int V 8,
    eval (select 2 (row [T1, T2, special add [T2, T3]])) V.

test_fix :-
    eval (app
          (fix X \ lam n \
           (match
            (special equal [n, lit (i 0)])
            [arr (plit (b btrue)) (lit (i 0)),
             arr (plit (b bfalse)) (app X (special sub [n, lit (i 1)]))]))
          (lit (i 8)))
          (lit (i 0)).

% let rec even n =
%   if (n = 0) then true
%   else odd (n - 1)
% and odd n =
%   if (n = 0) then false
%   else even (n - 1)

test_rowfix :-
    eval
      (letrow (rowfix EvenOdd \ row [
        (lam n \
          if_then_else (special equal [n, lit (i 0)])
            (lit (b btrue))
            (app (select 1 EvenOdd) (special sub [n, lit (i 1)]))),
        (lam n \
          if_then_else (special equal [n, lit (i 0)])
            (lit (b bfalse))
            (app (select 0 EvenOdd) (special sub [n, lit (i 1)])))
            ])
       EvenOdd \
       let (select 0 EvenOdd) Even \
       let (select 1 EvenOdd) Odd \
       (variant test_pair [app Even (lit (i 8)), app Even (lit (i 13))]))
      (variant test_pair [lit (b btrue), lit (b bfalse)]).

test_ulysse :-
    eval
      (backslash X \
        match X [nab Y \ arr (pnom Y) Y])
      (backslash X \ X).

test_quantifier_alternation_ok :-
    % nabla Y. forall y. (y, Y) = (X, X)
    eval
      (backslash X \
        match (variant test_pair [X, X])
          [nab Y \ all y \ arr (pvariant test_pair [pnom Y, pvar y]) y])
      (backslash X \ X).

test_quantifier_alternation_no :-
    % not (forall y. nabla Y. (y, Y) = (X, X))
    not (eval
      (backslash X \
        match (variant test_pair [X, X])
          [all y \ nab Y \ arr (pvariant test_pair [pnom Y, pvar y]) y])
    _).

type c_Abs constructor.
test_size_regression :-
    V_size =
      (fix v_size \ lam v_term \
       match v_term
         [(nab X \ arr (pnom X) (lit (i 0))),
          (all v_r \ arr (pvariant c_Abs [pvar v_r])
                         (new X \ app v_size (arobase v_r X)))]),
    eval (app V_size
          (variant c_Abs [backslash X \ variant c_Abs [backslash Y \ X]]))
    _.

test_bad_eval1 :-
  V_simple = (new (X \ match X [arr (pnom X) (lit (i 42))])),
  eval V_simple (lit (i 42)).

test_bad_eval2 :-
  V_simple = (lam var \ match var
              [nab (X \ arr (pnom X) (match X
                                      [arr (pnom X) (lit (i 43))]))]),
  eval (new cY \ app V_simple cY) (lit (i 43)).

test_lookup :-
    V_lookup = (lam n \ match n
                [nab Y \ arr (pnom Y)
                 (match n [arr (pnom Y) (lit (i 42))])]),
    eval
      (backslash c_X_0 \ app V_lookup c_X_0)
      (backslash X \ lit (i 42)).

test_vacp3 :-
    Vacp3 = (lam c0 \
             match c0
             [(all c1 \ arr
               (pvariant Abs [pbackslash c2 \ pvar c1])
               (lit (b btrue))),
              (all c1 \ arr
               (pvar c1)
               (lit (b bfalse)))]),
    eval
      (app Vacp3
       (variant Abs [backslash X \ variant Abs [backslash Y \ Y]]))
      (lit (b btrue)).

type c_Abs constructor.
test_id_eta_expanded :-
    V_id =
      (fix id \ lam term \ match term
         [(nab Y \ arr (pnom Y) Y),
          (all r \ arr (pvariant c_Abs [pbackslash X \ parobase (pvar r) X])
             (variant c_Abs [backslash X \ app id (arobase r X)]))]),
    eval
      (app V_id (variant c_Abs [backslash X \ X]))
      (variant c_Abs [backslash X \ X]).

type c_Unit constructor.
test_dale_unit :-
    eval
      (match (variant c_Unit [])
       [all r \ nab X \ arr (parobase (pvar r) X) (arobase r X)])
      (variant c_Unit []).
test_dale_escape :-
    not
      (eval
       (match (variant c_Unit [])
        [nab X \ arr (pvariant c_Unit []) X])
       R,
       print R).

type c_App constructor.
type c_Abs constructor.
test_notbeta :-
   NotBeta = (fix notbeta \ lam t \
     match t
     [(all r \
         arr (pvariant c_Abs [pvar r])
         (variant c_Abs
          [backslash Y \ app notbeta (arobase r Y)])),
      (nab X \ arr (pnom X) X),
      (all n \ all m \
         arr (pvariant c_App [(pvar m), (pvar n)])
         (match m [arr pany (variant c_App [m, n])]))]),
   eval
     (app NotBeta (variant c_Abs [backslash X \ X]))
     (variant c_Abs [backslash X \ X]).

main :-
    test_app_id, !,
    test_higher_arity, !,
    test_return_higher_arity, !,
    test_special, !,
    test_variant, !,
    test_matches_lit, !,
    test_matches_data, !,
    test_matches_nom, !,
    test_eval_clause, !,
    test_match_data, !,
    test_match_all, !,
    test_match_nab, !,
    test_match_nom, !,
    test_match_pair, !,
    test_match_wrong_nab, !,
    test_match_nom_distinct_ok, !,
    test_match_nom_distinct_no, !,
    test_match_nom_distinct_another_no, !,
    test_select, !,
    test_fix, !,
    test_rowfix, !,
    test_ulysse, !,
    test_quantifier_alternation_ok, !,
    %% test_quantifier_alternation_no, !,
    test_size_regression, !,
    test_bad_eval1, !,
    test_bad_eval2, !,
    test_lookup, !,
    test_vacp3, !,
    test_id_eta_expanded, !,
    test_dale_unit, !,
    test_dale_escape, !,
    test_notbeta, !,
    true
.
