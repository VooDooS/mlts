%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%% Typing of miniFP programs. (Figure 10.3)
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
kind ty                type.
type int, bool, string ty.
type sum               ty -> ty -> ty.  % Sum types '*'
type lst               ty -> ty.        % Lists
type arr               ty -> ty -> ty.  % Functional arrow type
type bigarr            ty -> ty -> ty.  % Higherarity arrow type
%type utm               ty.              % untyped lambda terms

type typeof            tm -> ty -> prop.  % Top-level predicate

type type_match         ty -> list clause -> ty -> prop.
type type_match_rule     ty -> clause      -> ty -> prop.

% Literals

typeof (lit (i _I)) int.
typeof (lit (b _B)) bool.
typeof (lit (s _S)) string.


% Builtins constr

type_constr pair (sum _A _B).


% Control flow

typeof (if_then_else P Q R) A :-
    typeof P bool,
    typeof Q A,
    typeof R A.


typeof (fix M) A :- pi x\ typeof x A => typeof (M x) A',
       (A = A', !; err_wrong_type (M x) A A' (fix M), fail).
       
typeof (let M R) A :- typeof M B, pi x\ typeof x B => typeof (R x) A.

typeof (new R) A :- pi x\ typeof x B_ => typeof (R x) A.


% Abstractions and applications

typeof (lam M) (arr A B)  :- pi x\ typeof x A => typeof (M x) B.

typeof (backslash M) (bigarr A B) :- pi x\ typeof x A => typeof (M x) B.

typeof (app M N) A :-
    typeof M (arr B A),
    typeof N B',
       (B = B', !; err_wrong_type N B B' (app M N), fail).
       
typeof (arobase M N) A :-
    typeof M (bigarr B A),
    typeof N B',
       (B = B', !; err_wrong_type N B B' (arobase M N), fail).


% Specials

type_spec add (arr int (arr int int)).
type_spec mul (arr int (arr int int)).
type_spec sub (arr int (arr int int)).

type_spec equal (arr A (arr A bool)).
%type_spec and (arr bool (arr bool bool)).
%type_spec or (arr bool (arr bool bool)).

type_args B [] B.
type_args (arr A B) [E|TL] C :-
    typeof E A,
    type_args B TL C.

typeof (special Spec Args) B :-
       type_spec Spec A,
       type_args A Args B.

% Variants TODO

type_sum [E] A :- typeof E A.

type_sum [E|TL] (sum A B) :-
    typeof E A, type_sum TL B. 

typeof (variant Constr Args) A :-
    type_constr Constr A,
    type_sum Args A.


% Patterns

type_pat pany _A.
type_pat (plit I) A :- typeof (lit I) A.
type_pat (pvar T) A :- typeof T A.
type_pat (pnom N) A :- typeof N A.
type_pat (pbackslash R) (bigarr A B) :- 
    pi x\ typeof x A => type_pat (R x) B.
type_pat (parobase P T) B :-
    type_pat P (bigarr A B),
    typeof T A.

%todo pvariant

% Matching

typeof (match Exp Rules) B :- typeof Exp A, type_match A Rules B.

type_match _A [] _B.
type_match A (R::Rs) B :-
    type_match_rule A R B, type_match A Rs B.

type_match_rule A (arr Pat Result) B :- type_pat Pat A, typeof Result B.
type_match_rule A (nab   R) B :- pi x\ typeof x C_ => type_match_rule A (R x) B.
type_match_rule A (all   R) B :- pi x\ typeof x C_ => type_match_rule A (R x) B.



