(* Opening conexion 
let ws =  new%js WebSockets.webSocket (Js.string ("ws://localhost:8000"));; *)

(*Sys_js.create_file "lp-syntax.elpi" (Data.lpsyntax.text);;


let xh = XmlHttpRequest.create ();;
xh##_open (Js.string "GET") (Js.string "lp-syntax.elpi") (Js.bool false);;
xh##send (Js.null);; *)

(*if ((xh##.status) = 200)
then (print_string ("RÃ©ponse : " ^ (Js.to_string xh##.responseText));
Sys_js.create_file "lp-syntax.elpi" (Js.to_string xh##.responseText))
else print_string ("Status : " ^ (string_of_int xh##.status) ^" : "^ (Js.to_string xh##.statusText));;*)

Data.load ();;

Elpi_API.Setup.init [] "";;

exception Query_failed;;

let parsed =  Elpi_API.Parse.program ["game.mod"];;
let prog = Elpi_API.Compile.program [parsed];;

let get_begining_state prog =
  let goal = Elpi_API.Parse.goal "begining_state Str."in
  let query = Elpi_API.Compile.query prog goal in
  
  match (Elpi_API.Execute.once prog query) with
    Success(data) ->
     Elpi_API.Data.StrMap.iter (fun s x -> print_string s)  data.arg_names;
     Array.iter (fun term -> Elpi_API.Pp.term
                             (Format.str_formatter)
                             term)
              data.assignments;
   Format.flush_str_formatter ()
| _ -> raise Query_failed
;;

let step prog state action =
  let goal = Elpi_API.Parse.goal ("step (" ^ state ^ ") (" ^ action ^ ") J S.") in
  let query = Elpi_API.Compile.query prog goal in
  
  match (Elpi_API.Execute.once prog query) with
    Success(data) ->
     let assignments = data.assignments in
     
     let resp = Array.map (fun term -> Elpi_API.Pp.term
                               (Format.str_formatter)
                               term;
                             (Format.flush_str_formatter ()))
                          assignments in
     resp.(0), resp.(1)
   
| _ -> raise Query_failed
;;

(* JS API *)
Js.export
  "game"
  (object%js (self)
     val mutable state = ""
     method game = self##start
     method start = self##.state := (get_begining_state prog)
     method step action =
       let (j, new_state)
         = step prog (self##.state) (Js.to_string action)
       in
       self##.state := new_state;
       print_string j;
       flush_all ()
                   
   end)
