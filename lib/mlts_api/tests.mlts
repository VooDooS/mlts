type tm =
  | App of tm * tm
  | Abs of tm => tm;;

let rec subst t x u = match (x,t) with
  | nab X   in (X,X) -> u
  | nab X Y in (X,Y) -> Y
  ;;

let rec beta t = match t with
  | App(m, n)  ->
    let m = beta m in let n = beta n in
    begin 
        match m with
        | Abs r -> new X in beta (subst (r @ X) X n)
 
	end;;

(*


let f x =
 let rec aux y =
 if y = 0 then 42 else aux (y - 1)
in
 aux x;;
f 3;;


List.hd (2::[]);;


type ipair =
| Pair of int * int;; 


new X in (match X with | nab X in X -> 1);;


(fun x y -> x + y) 13;;
(fun x y -> x + y) 13 29;;

let f x y = x + y;;
f 12 30;;

Pair(3, 4 + 38);;

X\X;;

let p x = match x with | y -> y;;
let p x = match x with | y -> y | nab X in (r @ X) -> 4;;

p 4;;
p 3;;

if false then 3 else let x = 42 in x;;

new X in 3;;

let f x y = x + y;;
let g x =
  3 + x;;
3 + g 4;;
"toto";;



(* (* Votre mission, si vous l'acceptez. *)
type name =
  | A
  | B
  | C;;

type proc =
  | Null
  | Plus of proc * proc
  | Par  of proc * proc
  | In   of name * (name => proc)
  | Out  of name * name * proc
  | Eqn  of name * name * proc
  | Taup of proc
  | Bang of proc
  | Nu   of name => proc;;

let rec assoc x alist = match alist with
  | (u,y)::alst -> if u = x then y else assoc x alst;;

type tm =
     | App of tm * tm
     | Abs of tm => tm;;

type located = (name => proc);;

let rec trans gamma term = match term with
  | App(m, n) ->
    begin
      let p = trans gamma m in
      let q = trans gamma n) in
          | (p, q) ->
                (U\ Nu(V\ Par(p @ V,
                    Nu(X\ Out(V, X, Out(V, U, Bang(In(X, q))))))))
  | Abs(m) -> new X in (U\ In(U, Y\
    let p = trans ((X,Y)::gamma) (m @ X) in
     In(U, V\ p @ V)))
  | nab X in X -> U\ Out(assoc X gamma, U, Null);;
*)
*)